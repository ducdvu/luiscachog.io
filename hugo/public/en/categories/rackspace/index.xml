<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rackspace | Luis Cacho</title>
    <link>/en/categories/rackspace/</link>
      <atom:link href="/en/categories/rackspace/index.xml" rel="self" type="application/rss+xml" />
    <description>Rackspace</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© 2019</copyright><lastBuildDate>Wed, 13 Feb 2019 13:37:04 -0600</lastBuildDate>
    <image>
      <url>/img/lc-profile.png</url>
      <title>Rackspace</title>
      <link>/en/categories/rackspace/</link>
    </image>
    
    <item>
      <title>Bulk Delete Rackspace Cloud Files data via API</title>
      <link>/bulk-delete-cloud-files-api/</link>
      <pubDate>Wed, 13 Feb 2019 13:37:04 -0600</pubDate>
      <guid>/bulk-delete-cloud-files-api/</guid>
      <description>&lt;p&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;
HAHAHUGOSHORTCODE-TOC0-HBHB&lt;/p&gt;

&lt;p&gt;Sometimes it is necessary to delete all the content of the Cloud Files containers, however, the API does not have a proper method to delete the data and the containers on the same API call. Also, accoring to the documentation, you can only delete &lt;strong&gt;empty&lt;/strong&gt; containers.&lt;/p&gt;

&lt;p&gt;So, in cases where you need to delete the &lt;strong&gt;data and the containers&lt;/strong&gt; at the same time, you should follow the next steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Download &lt;a href=&#34;https://github.com/cloudnull/turbolift&#34; target=&#34;_blank&#34;&gt;Turbolift&lt;/a&gt;, I know it is an old tool.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/cloudnull/turbolift
cd turbolift
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In order to get and isolated installation, we are going to create a Python Virtual Environment (virtualenv)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkvirtualenv turbolift
workon turbolift
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install the tool&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install turbolift
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now, prior to start to play with the API calls, we need to grab some data to authenticate with the API:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Variable&lt;/th&gt;
&lt;th&gt;Definition&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;USERNAME&lt;/td&gt;
&lt;td&gt;This is the Rackspace Public Cloud username&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;APIKEY&lt;/td&gt;
&lt;td&gt;This is your API-KEY&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;REGION&lt;/td&gt;
&lt;td&gt;This is the Region where the Cloud Files are located (dfw, ord, iad, lon, hkg)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;TOKEN&lt;/td&gt;
&lt;td&gt;The TOKEN is generated after you get authenticated&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ENDPOINT&lt;/td&gt;
&lt;td&gt;This ENDPOINT is given also after you get authenticated&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next step, we are going to use &lt;a href=&#34;https://curl.haxx.se/&#34; target=&#34;_blank&#34;&gt;cURL&lt;/a&gt;, to perform all the API calls:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First of all, get the TOKEN:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;USERNAME=YOUR-USERNAME
APIKEY=YOUR-APIKEY
TOKEN=$(curl -s -XPOST https://identity.api.rackspacecloud.com/v2.0/tokens \ 
  -d&#39;{&amp;quot;auth&amp;quot;:{&amp;quot;RAX-KSKEY:apiKeyCredentials&amp;quot;:{&amp;quot;username&amp;quot;:&amp;quot;&#39;$USERNAME&#39;&amp;quot;,&amp;quot;apiKey&amp;quot;:&amp;quot;&#39;$APIKEY&#39;&amp;quot;}}}&#39; \
  -H&amp;quot;Content-type:application/json&amp;quot; | jq &#39;.access.token.id&#39; | tr -d &amp;quot;\&amp;quot;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next step, get the ENDPOINT:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ENDPOINT=$(curl -s -XPOST https://identity.api.rackspacecloud.com/v2.0/tokens \ 
    -d&#39;{&amp;quot;auth&amp;quot;:{&amp;quot;RAX-KSKEY:apiKeyCredentials&amp;quot;:{&amp;quot;username&amp;quot;:&amp;quot;&#39;$CL_USERNAME&#39;&amp;quot;,&amp;quot;apiKey&amp;quot;:&amp;quot;&#39;$APIKEY&#39;&amp;quot;}}}&#39; \
    -H&amp;quot;Content-type:application/json&amp;quot; | jq &#39;.access.serviceCatalog[] | select((.name==&amp;quot;cloudFiles&amp;quot;) or (.name==&amp;quot;cloudFilesCDN&amp;quot;)) | {name} + .endpoints[] | .publicURL&#39; | tr -d &amp;quot;\&amp;quot;&amp;quot; | grep -v cdn | grep -i $REGION)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this case we are skipping all te CDN endpoints, but you can add them if is necessary.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;With all the collected data, next step is use turbolift to delete the Cloud Files container and their data. To do it, I use a for-loop:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;for i in $(curl -s -H &amp;quot;X-Auth-Token: $TOKEN&amp;quot; $ENDPOINT); do turbolift -u $USERNAME -a $APIKEY --os-rax-auth $REGION delete -c $i ; done  
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, you have all the Data and Cloud Files containers deleted on one region.&lt;/p&gt;

&lt;p&gt;😄&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WordPress with Let&#39;s Encrypt SSL Certificate on a Load Balancer</title>
      <link>/</link>
      <pubDate>Sun, 03 Sep 2017 09:26:47 -0600</pubDate>
      <guid>/</guid>
      <description>

&lt;p&gt;Hi again,&lt;/p&gt;

&lt;p&gt;As many of you know a lot of &amp;ldquo;Production&amp;rdquo; applications need to be configured to provide High Availability. With that in mind, a best practice architecture to your application is to add a Load Balancer as a front end who distribute your traffic between your application nodes, as you can appreciate on the next image:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/wordpress-lets-encrypt-ssl-certificate-load-balancer/LoadBalancerHA.png&#34; alt=&#34;Load Balancer HA&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;ssl-offloading&#34;&gt;SSL Offloading&lt;/h1&gt;

&lt;p&gt;In this case, my &amp;ldquo;Production&amp;rdquo; application is my blog, and I will install a SSL Certificate on the Cloud Load Balancer(CLB) to offloading the encryption/decryption to the CLB instead of doing it on the webserver. That way your webservers uses port 80 (HTTP), as always, and you serve your content trought port 443(HTTPS).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/wordpress-lets-encrypt-ssl-certificate-load-balancer/SSL-Offloading.jpg&#34; alt=&#34;SSL-Offloading&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here are the what I use to configure my WordPress with SSL Certificate:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SSL Certificate issued using Let&amp;rsquo;s Encrypt&lt;/li&gt;
&lt;li&gt;A Client of Let&amp;rsquo;s Encrypt called acme&lt;/li&gt;
&lt;li&gt;A Cloud Load Balancer&lt;/li&gt;
&lt;li&gt;A WordPress installation&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;step-1-install-acme-sh-client&#34;&gt;Step 1: Install acme.sh client&lt;/h2&gt;

&lt;p&gt;There is a lot of &lt;a href=&#34;https://letsencrypt.org/docs/client-options/&#34; target=&#34;_blank&#34;&gt;ACME clients&lt;/a&gt; supported by Let&amp;rsquo;s Encrypt, the most popular is &lt;a href=&#34;https://certbot.eff.org&#34; target=&#34;_blank&#34;&gt;Certbot.&lt;/a&gt; However, I prefer to use &lt;a href=&#34;https://github.com/Neilpang/acme.sh&#34; target=&#34;_blank&#34;&gt;acme.sh&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s install it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/Neilpang/acme.sh.git
cd acme.sh
# Create a data home directory
sudo mkdir -p /opt/acme/data
# Actual command to install it
bash acme.sh --install --home /opt/acme --config-home /opt/acme/data --certhome /opt/acme/data/ssl-certs --accountemail your@email.com
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-2-issue-ssl-certificate&#34;&gt;Step 2: Issue SSL Certificate&lt;/h2&gt;

&lt;p&gt;Once acme.sh is installed, we proceed to issue our first SSL Certificate:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;/opt/acme/acme.sh --issue -d example.com -w /var/www/vhosts/example.com/public_html
[Mon Aug 25 06:04:07 UTC 2017] Creating domain key
[Mon Aug 25 06:04:07 UTC 2017] The domain key is here: /opt/acme/data/ssl-certs/example.com/example.com.key
[Mon Aug 25 06:04:07 UTC 2017] Single domain=&#39;example.com&#39;
[Mon Aug 25 06:04:07 UTC 2017] Getting domain auth token for each domain
[Mon Aug 25 06:04:07 UTC 2017] Getting webroot for domain=&#39;example.com&#39;
[Mon Aug 25 06:04:07 UTC 2017] Getting new-authz for domain=&#39;example.com&#39;
[Mon Aug 25 06:04:08 UTC 2017] The new-authz request is ok.
[Mon Aug 25 06:04:08 UTC 2017] Verifying:example.com
[Mon Aug 25 06:04:11 UTC 2017] Success
[Mon Aug 25 06:04:11 UTC 2017] Verify finished, start to sign.
[Mon Aug 25 06:04:11 UTC 2017] Cert success.
-----BEGIN CERTIFICATE-----
MIIE/zCCA+egAwIBAgISA2AIs/G8gWjkRkNOUb7zmqh1MA0GCSqGSIb3DQEBCwUA
MEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQD
ExpMZXQncyBFbmNyeXB0IEF1dGhvcml0eSBYMzAeFw0xNzA4MjgwNTA0MDBaFw0x
NzExMjYwNTA0MDBaMBkxFzAVBgNVBAMTDmNvb2tpZWxhYnMubmV0MIIBIjANBgkq
hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAo8/4fXH0dOHcSlyXpsBoULhwQYkz4m0J
MegRHU2mhyy/jfKWM6KHDxHpFWUFajLJ/ORE4uncvjmRYeSVBxgv2R2cYoZyKd6v
txT+Cdj3jD9fBfDerfdfsdfsd6Y6mlr6Im61afKsFXIgLsprBpK22JU6HOz+0Fdo
lan09aaF8zLPtVzdfJw9MU55K7nzerxO8j4ro2lve0PHExkMIBCrXey50wcuqQRY
hwkbbXsm+wTES7TCn3tooSzFq6ore3JrSckxhFQ96EOea0s9CgYnw4d9rU/b3jyK
bFCILEJK64vgFHx0qvd0hBJFJG/HUtAXAVrFQjjlZlCmCMbnee1UTQIDAQABo4IC
DjCCAgowDgYDVR0pasoasoasogWgMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEF
BQcDAjAMBgNVHRMBAf8EAjAAMB0GA1UdDgQWBBR2KRpXKKgTorwfXpo44wgKyFUl
QzAfBgNVHSMEGDAWgBSoSmpjBH3duubRObemRWXv86jsoTBvBggrBgEFBQcBAQRj
MGEwLgYIKwYBBQUHMAASdTdddHA6Ly9vY3NwLmludC14My5sZXRzZW5jcnlwdC5v
cmcwLwYIKwYBBQUHMAKGI2h0dHA6Ly9jZXJ0LmludC14My5sZXRzZW5jcnlwdC5v
cmcvMBkGA1UdEQQSMBCCDmNvb2tpZWxhYnMubmV0MIH+BgNVHSAEgfYwgfMwCAYG
Z4EMAQIBMIHmBgsrBgEEAYLfEwEBATCB1jAmBggrBgEFBQcCARYaaHR0cDovL2Nw
cy5sZXRzZW5jcnlwdC5vcmcwgasGCCsGAQUFBwICMIGeDIGbVGhpcyBDZXJ0aWZp
Y2F0ZSBtYXkgb25seSBiZSByZWxpZWQgdXBvbiBieSBSZWx5aW5nIFBhcnRpZXMg
YW5kIG9ubHkgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBDZXJ0aWZpY2F0ZSBQb2xp
Y3kgZm91bmQgYXQgaHR0cHM6Ly9sZXRzZW5jcnlwdC5vcmcvcmVwb3NpdG9yeS8w
DQYJKoZIhvcNAQELBQADggEBAFVGs82tzyVER6U0x7p/Q+6xplDFd6ap/dVX9G6i
eRPf4ayGykPSH9J3ewu398LOQd3DE93oWbqc7PfEC40Z5HqvCEY3fl9auep99/IF
rwhf36J7PXvEsPrUB6pxNFSBw9WX366Z1MP8qoIzm3XYEpp2D/SPniWY5+eQ42Pj
WNxxVksA4kFUF9wgKcrsCNTm0X8GZj5HUXC1OwtlopY2w42QrAMGwz1jM4nxv5Mc
Jim+nT0zmJUhAdQi8ocDjAl2PvcfdgfmkMr9IWH3al/GJSKy3a9Cq+BaIsIUYi6E
8M8Mj+00ONNn1folm9aVn+FW5fVCaxYN32ir8PnoTWkOXK8=
-----END CERTIFICATE-----
[Mon Aug 25 06:04:11 UTC 2017] Your cert is in  /opt/acme/data/ssl-certs/example.com/example.com.cer 
[Mon Aug 25 06:04:11 UTC 2017] Your cert key is in  /opt/acme/data/ssl-certs/example.com/example.com.key 
[Mon Aug 25 06:04:11 UTC 2017] The intermediate CA cert is in  /opt/acme/data/ssl-certs/example.com/ca.cer 
[Mon Aug 25 06:04:11 UTC 2017] And the full chain certs is there:  /opt/acme/data/ssl-certs/example.com/fullchain.cer 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where the explained options are:&lt;/p&gt;

&lt;p&gt;-issue: Issue a new certificate&lt;/p&gt;

&lt;p&gt;-d (-domain) : Specifies a domain, used to issue, renew or revoke, etc.&lt;/p&gt;

&lt;p&gt;-w (-webroot) : Specifies the web root folder for web root mode. This is the DocumentRoot where your site is hosted and it is necessary to verify it by Let&amp;rsquo;s Encrypt.&lt;/p&gt;

&lt;h2 id=&#34;step-3-install-ssl-certificate-on-cloud-load-balancer&#34;&gt;Step 3: Install SSL Certificate on Cloud Load Balancer&lt;/h2&gt;

&lt;p&gt;So, at this moment we have our SSL Certificate, Private Key, and Intermediate CA Certificate ready to install on our Cloud Load Balancer (CLB)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Your cert is in /opt/acme/data/ssl-certs/example.com/example.com.cer
Your cert key is in /opt/acme/data/ssl-certs/example.com/example.com.key
The intermediate CA cert is in /opt/acme/data/ssl-certs/example.com/ca.cer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we should go to &lt;a href=&#34;https://mycloud.rackspace.com&#34; target=&#34;_blank&#34;&gt;https://mycloud.rackspace.com&lt;/a&gt; -&amp;gt; Rackspace Cloud -&amp;gt; Networking -&amp;gt; Cloud Load Balancers:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/wordpress-lets-encrypt-ssl-certificate-load-balancer/CLB01.png&#34; alt=&#34;Cloud Load Balancer&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then, to Optional Features and Enable/Configure on &amp;ldquo;Secure Traffic SSL&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/wordpress-lets-encrypt-ssl-certificate-load-balancer/CLB02.png&#34; alt=&#34;Cloud Load Balancer&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, we add our SSL Certificate, Private Key, and Intermediate CA Certificate to the CLB and save the configuration:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/wordpress-lets-encrypt-ssl-certificate-load-balancer/CLB03.png&#34; alt=&#34;Cloud Load Balancer&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-4-configure-wordpress&#34;&gt;Step 4: Configure WordPress&lt;/h2&gt;

&lt;p&gt;We are almost done, at this time we already have configured our SSL on the CLB to provide WordPress over HTTPS, however, WordPress is still with HTTP, so we need to reconfigure our WordPress with SSL.&lt;/p&gt;

&lt;h3 id=&#34;database-queries&#34;&gt;Database queries&lt;/h3&gt;

&lt;p&gt;First of all, we should update the links from http to https; we are going to do it directly on the database doing the following queries:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Change all instances of &lt;code&gt;example.com&lt;/code&gt; to your own. If you have the &lt;code&gt;www&lt;/code&gt; as part of your WordPress Address(URL) in the WordPress Settings, add the &amp;lsquo;www&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;Also, if you have a custom table prefix in the WordPress database, something other than the default &amp;lsquo;wp&lt;em&gt;&amp;rsquo;, then you must change all the instances of &amp;lsquo;wp&lt;/em&gt;&amp;rsquo; to your own table prefix.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Update any embedded attachments/img that use http:This one updates the src attributes that use double quotes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;UPDATE `wp_posts` SET post_content = REPLACE(post_content, &#39;src=\&amp;quot;http://example.com&#39;, \ 
&#39;src=\&amp;quot;https://example.com&#39;) WHERE post_content LIKE &#39;%src=\&amp;quot;http://example.com%&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This one takes care of any src attributes that use single quotes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;UPDATE `wp_posts` SET post_content = REPLACE(post_content, &#39;src=\&#39;http://example.com&#39;, \ 
&#39;src=\&#39;https://example.com&#39;) WHERE post_content LIKE &#39;%src=\&#39;http://example.com%&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Update any hard-coded URLs for links.This one updates the URL for href attributes that use double quotes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;UPDATE `wp_posts` SET post_content = REPLACE(post_content, &#39;href=\&amp;quot;http://example.com&#39;, \
&#39;href=\&amp;quot;https://example.com&#39;) WHERE post_content LIKE &#39;%href=\&amp;quot;http://example.com%&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This one updates the URL for href attributes that use single quotes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;UPDATE `wp_posts` SET post_content = REPLACE(post_content, &#39;href=\&#39;http://example.com&#39;, \
&#39;href=\&#39;https://example.com&#39;) WHERE post_content LIKE &#39;%href=\&#39;http://example.com%&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Update any &amp;ldquo;pinged&amp;rdquo; links:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;UPDATE `wp_posts` SET pinged = REPLACE(pinged, &#39;http://example.com&#39;, \
&#39;https://example.com&#39;) WHERE pinged LIKE &#39;%http://example.com%&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This step is just a confirmation step to make sure that there are no remaining http URLs for your site in the wp_posts table, except the GUID URLs.&lt;/p&gt;

&lt;p&gt;You must replace WP_DB_NAME, near the beginning of the query, with the name of your database.&lt;/p&gt;

&lt;p&gt;This will confirm that nowhere in the wp_posts table is there a remaining http URL, outside of the GUID column. This ignores URLs in the GUID column.&lt;/p&gt;

&lt;p&gt;This query only searches; it does not replace anything, nor make any changes. So, this is safe to run. It’s a safe and quick way to check the wp_posts table while ignoring the guid column.&lt;/p&gt;

&lt;p&gt;This SQL query should return an empty set. That would mean that it found no http URLs for your site. (This is all just 1 query. It’s 1 very, very long line.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning: &lt;/strong&gt;Remember to replace WP_DB_NAME, near the beginning of the query, with the name of your database.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT *  FROM `WP_DB_NAME`.`wp_posts` WHERE (CONVERT(`ID` USING utf8) LIKE \
&#39;%%http://example.com%%&#39; OR CONVERT(`post_author` USING utf8) LIKE &#39;%%http://example.com%%&#39; \ 
OR CONVERT(`post_date` USING utf8) LIKE &#39;%%http://example.com%%&#39; \ 
OR CONVERT(`post_date_gmt` USING utf8) LIKE &#39;%%http://example.com%%&#39; \
OR CONVERT(`post_content` USING utf8) LIKE &#39;%%http://example.com%%&#39; \
OR CONVERT(`post_title` USING utf8) LIKE &#39;%%http://example.com%%&#39; \ 
OR CONVERT(`post_excerpt` USING utf8) LIKE &#39;%%http://example.com%%&#39; \
OR CONVERT(`post_status` USING utf8) LIKE &#39;%%http://example.com%%&#39; \
OR CONVERT(`comment_status` USING utf8) LIKE &#39;%%http://example.com%%&#39; \
OR CONVERT(`ping_status` USING utf8) LIKE &#39;%%http://example.com%%&#39; \
OR CONVERT(`post_password` USING utf8) LIKE &#39;%%http://example.com%%&#39; \
OR CONVERT(`post_name` USING utf8) LIKE &#39;%%http://example.com%%&#39; \
OR CONVERT(`to_ping` USING utf8) LIKE &#39;%%http://example.com%%&#39; \
OR CONVERT(`pinged` USING utf8) LIKE &#39;%%http://example.com%%&#39; \
OR CONVERT(`post_modified` USING utf8) LIKE &#39;%%http://example.com%%&#39; \
OR CONVERT(`post_modified_gmt` USING utf8) LIKE &#39;%%http://example.com%%&#39; \
OR CONVERT(`post_content_filtered` USING utf8) LIKE &#39;%%http://example.com%%&#39; \
OR CONVERT(`post_parent` USING utf8) LIKE &#39;%%http://example.com%%&#39; \
OR CONVERT(`menu_order` USING utf8) LIKE &#39;%%http://example.com%%&#39; \
OR CONVERT(`post_type` USING utf8) LIKE &#39;%%http://example.com%%&#39; \
OR CONVERT(`post_mime_type` USING utf8) LIKE &#39;%%http://example.com%%&#39; \
OR CONVERT(`comment_count` USING utf8) LIKE &#39;%%http://example.com%%&#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now, we move to the wp_comments table. This changes any comment author URLs that point to the http version of your site. This is in case you’ve ever replied to a comment while your URL was pointing to http.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;UPDATE `wp_comments` SET comment_author_url = REPLACE(comment_author_url, \ 
&#39;http://example.com&#39;, &#39;https://example.com&#39;) WHERE comment_author_url \ 
LIKE &#39;%http://example.com%&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This updates the content of the comments on your site. If there are any links in the comments that are linking to an http URL on your site, they will be updated to https.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;UPDATE `wp_comments` SET comment_content = REPLACE(comment_content, &#39;http://example.com&#39;, \ 
&#39;https://example.com&#39;) WHERE comment_content LIKE &#39;%http://example.com%&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now we move to the wp_postmeta table. This takes care of any custom post meta that points to the http version of your site.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;UPDATE `wp_postmeta` SET `meta_value` = REPLACE(meta_value, &#39;http://example.com&#39;, \ 
&#39;https://example.com&#39;) WHERE meta_value LIKE &#39;%http://example.com%&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now we move to the wp_options table. Update the “WordPress Address (URL)” and “Site Address (URL)”.&lt;/p&gt;

&lt;p&gt;For the WordPress Address URL, you may have to modify example.com. If you have WordPress installed in some other directory, then modify this according to your own WordPress URL. For example, some people have WordPress installed in a subdirectory named “blog”, and so their WordPress Address would be &lt;a href=&#34;https://example.com/blog&#34; target=&#34;_blank&#34;&gt;https://example.com/blog&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;UPDATE `wp_options` SET `option_value` = &amp;quot;https://example.com&amp;quot; \ 
WHERE `wp_options`.`option_name` = &#39;siteurl&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This one will update the Site Address URL (this is the home page of your site):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;UPDATE `wp_options` SET `option_value` = &amp;quot;https://example.com&amp;quot; \
WHERE `wp_options`.`option_name` = &#39;home&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;wordpress-control-panel&#34;&gt;WordPress Control Panel&lt;/h3&gt;

&lt;p&gt;Besides, with run the queries directly on the database, we can update, or verify,  the blog URLs, by going to Settings &amp;gt; General&lt;/p&gt;

&lt;p&gt;And updating your WordPress Address (URL) and Site Address (URL) address fields.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/wordpress-lets-encrypt-ssl-certificate-load-balancer/WP-ChangeURL.png&#34; alt=&#34;Updating URLs&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;wordpress-config-file&#34;&gt;WordPress Config File&lt;/h3&gt;

&lt;p&gt;Finally, we should add the following line to our &lt;strong&gt;wp_config.php&lt;/strong&gt; file&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$_SERVER[&#39;HTTPS&#39;]=&#39;on&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, you have configured WordPress with Let&amp;rsquo;s Encrypt SSL Certificate on a Load Balancer.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title> Build a Dynamic DNS Client with Rackspace API</title>
      <link>/build-a-dynamc-dns-client-with-rackspace-api/</link>
      <pubDate>Mon, 11 Apr 2016 01:24:48 -0600</pubDate>
      <guid>/build-a-dynamc-dns-client-with-rackspace-api/</guid>
      <description>&lt;p&gt;This time I&amp;rsquo;ve want to create a homemade Server with my Raspberry Pi2 and publish it using my own sub-domain, the main problem is that the ISP provide me an dynamic IP and we should ensure that if my IP address change the sub-domain record should point to the new IP.&lt;/p&gt;

&lt;p&gt;The instructions assume that you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Have a domain&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Have already changed your NS records to point to dns1.stabletransit.com and dns2.stabletransit.com.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;You should download the latest version of rsdns from github&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd ~/bin/
git clone https://github.com/linickx/rsdns.git
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Go to your Rackspace portal (&lt;a href=&#34;https://mycloud.rackspace.com/&#34; target=&#34;_blank&#34;&gt;https://mycloud.rackspace.com/&lt;/a&gt;) and grab your Username &amp;amp; API key (It&amp;rsquo;s under &amp;ldquo;Your Account&amp;rdquo; -&amp;gt; &amp;ldquo;Account Settings&amp;rdquo; -&amp;gt; &amp;ldquo;API Key&amp;rdquo;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a configuration file for rsdns (~/.rsdns_config) with your settings.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash
RSUSER=lcacho 
RSAPIKEY=1234567890
RSPATH=~/bin/rsdns/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You need your domain created on Rackspace(It&amp;rsquo;s under &amp;ldquo;Networking&amp;rdquo; -&amp;gt; &amp;ldquo;Cloud DNS&amp;rdquo; -&amp;gt; &amp;ldquo;Create Domain&amp;rdquo;) if you don&amp;rsquo;t have your domain created you are able to created using rsdns:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./rsdns-domain.sh -d www.luiscachog.io -e lcacho@luisachog.io
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once you have a domain setup you need to create an A record. To create the A record you going to need an IP address, you can use &lt;a href=&#34;http://icanhazip.com&#34; target=&#34;_blank&#34;&gt;http://icanhazip.com&lt;/a&gt; to get your actual current IP. Again to create a record you are able to do it from Rackspace panel (It&amp;rsquo;s under &amp;ldquo;Networking&amp;rdquo; -&amp;gt; &amp;ldquo;Cloud DNS&amp;rdquo; -&amp;gt; YOUR_DOMAIN -&amp;gt; &amp;ldquo;Add Record&amp;rdquo;) or you can use rsdns:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./rsdns-a.sh -n dynamic-host.luiscachog.io -i 123.123.123.123 -t 3600
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the above the TTL is set to 1hr (3600 secs), this is so that DNS caches do not keep the record too long. That&amp;rsquo;s all the pre-work done, now lets get your dynamic host setup!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The script to update your a record is rsdns-dc.sh, and you run it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./rsdns-dc.sh -n dynamic-host.luiscachog.io
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The script uses icanhazip to get your current IP, it then update the A record with it.&lt;/p&gt;

&lt;p&gt;I never switch off my router so I have create a created a cronjob to run that script every 2 hours, plus the 1hr TTL should mean that the record is roughly in sync with my IP without making unnecessary requests&lt;/p&gt;

&lt;p&gt;7.- I use CentOS, so I can simply drop the following file called rsdns-dc into /etc/cron.d/ with this&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;vim /etc/cron.d/rsdns-dc
* */2  * * *     lcacho /home/lcacho/bin/rsdns/rsdns-dc.sh -n dynamic-host.luiscachog.io &amp;amp;&amp;gt;/dev/null
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we are done! Private Dynamic DNS on your own zone using the Rackspace API.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>View sources IP&#39;s in Apache Logs behind a Load Balancer</title>
      <link>/view-sources-ips-apache-logs-behind-loadbalancer/</link>
      <pubDate>Fri, 13 Feb 2015 02:08:44 -0500</pubDate>
      <guid>/view-sources-ips-apache-logs-behind-loadbalancer/</guid>
      <description>&lt;p&gt;When you use the Rackspace Cloud Load Balancers, it is common that the IP logged in Apache is the Private IP (ServiceNet) from the Cloud Load Balancer, however, we can fix that.&lt;/p&gt;

&lt;p&gt;We can view sources IP&amp;rsquo;s in Apache Logs doing some changes on Apache configuration file and also on the vhosts configuration files.&lt;/p&gt;

&lt;p&gt;On your Apache configuration file, you should to find the line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;LogFormat &amp;quot;%h %l %u %t \&amp;quot;%r\&amp;quot; %&amp;amp;gt;s %b \&amp;quot;%{Referer}i\&amp;quot; \&amp;quot;%{User-Agent}i\&amp;quot;&amp;quot; combined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Modified to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;LogFormat &amp;quot;%{X-Forwarded-For}i %h %l %u %t \&amp;quot;%r\&amp;quot; %&amp;amp;gt;s %O \&amp;quot;%{Referer}i\&amp;quot; \&amp;quot;%{User-Agent}i\&amp;quot;&amp;quot; combined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And also, on your vhosts configuration files you should to change the &amp;ldquo;combined&amp;rdquo; LogFormat definition will then be called in a &amp;ldquo;CustomLog&amp;rdquo; entry specific to your VirtualHost configuration. Here is an example VirtualHost definition to show you what I&amp;rsquo;m referring to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ServerAdmin webmaster@example.com
DocumentRoot /var/www/html/example.com
ServerName example.com
ErrorLog logs/example.com-error_log
CustomLog logs/example.com-access_log combined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After adding the X-Forwarded-For definition to the LogFormat definition, you can restart Apache and view the logs to notice the difference. If all is done properly, you will see an actual public IP in the first field of your logs instead of the Cloud Load Balancer IP.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I&#39;m a Racker</title>
      <link>/im-a-racker/</link>
      <pubDate>Mon, 31 Mar 2014 02:08:44 -0500</pubDate>
      <guid>/im-a-racker/</guid>
      <description>

&lt;p&gt;&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Since January 6th I working on &lt;a href=&#34;http://www.rackspace.com/&#34; target=&#34;_blank&#34;&gt;Rackspace&lt;/a&gt;, the Open Cloud Company, so I&amp;rsquo;m a Racker almost 3 months ago and I&amp;rsquo;m loving every minute of it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/im-a-racker/Rackspace_2014.jpg&#34; alt=&#34;Rackspace 2014&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;previous&#34;&gt;Previous&lt;/h1&gt;

&lt;p&gt;Everything stared on November 2013 when a Technical Recruiter contact me and started a proceess with some long tough interviews, ability tests, paperwork, etc; I have accepted a position as a Linux System Administrator I in the LATAM Team for Rackspace, so, I got to work for one of the most dynamic, fanatic, and fun tech companies in the world!&lt;/p&gt;

&lt;p&gt;So, I was very excited, nervous, happy, all together.&lt;/p&gt;

&lt;h1 id=&#34;the-castle&#34;&gt;The Castle&lt;/h1&gt;

&lt;p&gt;Since I came to The Castle, everything was wonderful, I have met nice, friendly, smart and fanatical people, like &lt;a href=&#34;https://twitter.com/rackersugarbear&#34; target=&#34;_blank&#34;&gt;@SugarBear&lt;/a&gt;, a Rackspace Ambassador of Culture, or &lt;a href=&#34;https://twitter.com/gweston&#34; target=&#34;_blank&#34;&gt;Graham Weston&lt;/a&gt;, Rackspace&amp;rsquo;s Chairman and Co-Funder, I met them at the Rookie Orientation (a.k.a Rookie&amp;rsquo;O), where I spend time with other Rookies learning about Rackspace history, culture and future plans.&lt;/p&gt;

&lt;p&gt;On the Rookie&amp;rsquo;O, I was surprised and admired with all the energy that is transmitted between the new Rackers, it was awesome!&lt;/p&gt;

&lt;p&gt;And I was inspired by the Rackspace Core Values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fanatical Support® in all we do.&lt;/li&gt;
&lt;li&gt;Results first, substance over flash.&lt;/li&gt;
&lt;li&gt;Committed to Greatness&lt;/li&gt;
&lt;li&gt;Full Disclosure and Transparency&lt;/li&gt;
&lt;li&gt;Passion for our Work&lt;/li&gt;
&lt;li&gt;Treat fellow Rackers like Friends and Family&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Which from my point of view I can applied to my personal life, and having great results.&lt;/p&gt;

&lt;p&gt;Also is very comfortable to have a Coffe Shop, a soda machine or microwaves inside the Castle. It is pretty nice!&lt;/p&gt;

&lt;p&gt;In general the first week in Rackspace, on the Rookie&amp;rsquo;O, I was a great experience, I can say that is one of my best experiences in my life.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/im-a-racker/Rackspace_RookieO.jpg&#34; alt=&#34;Rackspace RookieO&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/im-a-racker/Rackspace_FuelStation.jpg&#34; alt=&#34;Rackspace Fanatical Jacket&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/im-a-racker/Rackspace_Slide.jpg&#34; alt=&#34;Rackspace GroundTown&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;my-goals&#34;&gt;My Goals&lt;/h1&gt;

&lt;p&gt;This is a new big challenge, because means:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Relocation in other country, specifically in San Antonio, TX, USA.&lt;/li&gt;
&lt;li&gt;Leave my family in Mexico City, that means that I see my parents only for Skype or FaceTime :).&lt;/li&gt;
&lt;li&gt;Know other culture, the &amp;ldquo;American&amp;rdquo; culture, with the Breakfast Tacos or Tex-Mex food (I really hate the Tex-Mex food yiack!) or the Lunch at noon, the people do not always says &amp;ldquo;Good morning&amp;rdquo; and some details that I don&amp;rsquo;t understand but here is common.&lt;/li&gt;
&lt;li&gt;Improve my skills in other language (English) event though I&amp;rsquo;m in the Rackspace LATAM team all the communications like emails or meetings are in English, so, it is very important for my job.&lt;/li&gt;
&lt;li&gt;And the most important challenge for me is still learn about Linux, get my Red Hat Certifications, do my best at job and take advantage of this great opportunity. All of that to try to be a DevOps Engineer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/im-a-racker/Rackspace_MyDesk.jpg&#34; alt=&#34;Rackspace MyDesk&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I will be working on, providing Fanatical Support for our customers, resolving LATAM customer issues with Linux and working with remote teams from all around the world.&lt;/p&gt;

&lt;p&gt;Summarizing, I&amp;rsquo;m a happy Racker 🙂&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
