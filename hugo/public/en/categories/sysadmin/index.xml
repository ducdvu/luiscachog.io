<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SysAdmin | Luis Cacho</title>
    <link>/en/categories/sysadmin/</link>
      <atom:link href="/en/categories/sysadmin/index.xml" rel="self" type="application/rss+xml" />
    <description>SysAdmin</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2019</copyright><lastBuildDate>Wed, 15 May 2019 13:58:42 -0600</lastBuildDate>
    <image>
      <url>/img/lc-profile.png</url>
      <title>SysAdmin</title>
      <link>/en/categories/sysadmin/</link>
    </image>
    
    <item>
      <title>Docker Login the Right Way</title>
      <link>/docker-login-the-right-way/</link>
      <pubDate>Wed, 15 May 2019 13:58:42 -0600</pubDate>
      <guid>/docker-login-the-right-way/</guid>
      <description>

&lt;p&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;
HAHAHUGOSHORTCODE-TOC0-HBHB&lt;/p&gt;

&lt;h1 id=&#34;docker-login-the-right-way&#34;&gt;Docker Login the right Way&lt;/h1&gt;

&lt;p&gt;Hi again!&lt;/p&gt;

&lt;p&gt;It is been a while since I wrote something here, as always, there is no much time for a hobby.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been working for a while with docker, not a production level, but for some applications that I use at work.
And since the &lt;a href=&#34;https://www.theinquirer.net/inquirer/news/3074793/docker-hub-breach&#34; target=&#34;_blank&#34;&gt;Docker Hub Data breach&lt;/a&gt; I put more atention on the security of my data/credentials, so I investigate a little about and found this official repository &lt;a href=&#34;https://github.com/docker/docker-credential-helpers/&#34; target=&#34;_blank&#34;&gt;https://github.com/docker/docker-credential-helpers/&lt;/a&gt; from Docker where are the supported credential helpers.&lt;/p&gt;

&lt;h2 id=&#34;credential-store&#34;&gt;Credential Store&lt;/h2&gt;

&lt;p&gt;Docker keeps our credentials saved on a JSON file located on &lt;code&gt;~/.docker/config.json&lt;/code&gt;, but unfortunatelly credentials are just encrypted on base64, here is an &lt;a href=&#34;https://fosdem.org/2019/schedule/event/base64_not_encryption/&#34; target=&#34;_blank&#34;&gt;articule/video&lt;/a&gt; where there is an explanation for the why it is a bad idea to just use base64 encryption.&lt;/p&gt;

&lt;p&gt;The following is a diagram on how a plain text storage works:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/docker-login-the-right-way/DockerPlainTextCredentials.png&#34; alt=&#34;Plain Text Storage&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here is an exampleon how &lt;code&gt;~/.docker/config.json&lt;/code&gt; looks like when is using plain text credentials:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cat ~/.docker/config.json
{
	&amp;quot;auths&amp;quot;: {
		&amp;quot;https://index.docker.io/v1/&amp;quot;: {
      &amp;quot;auth&amp;quot;: &amp;quot;azRjaDA6c3VwZXJzZWNyZXRwYXNzd29yZAo=&amp;quot;
    },
    &amp;quot;quay.io&amp;quot;: {
      &amp;quot;auth&amp;quot;: &amp;quot;azRjaDA6c3VwZXJzZWNyZXRwYXNzd29yZAo=&amp;quot;
    }
	},
	&amp;quot;HttpHeaders&amp;quot;: {
		&amp;quot;User-Agent&amp;quot;: &amp;quot;Docker-Client/18.09.6 (linux)&amp;quot;
	}
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After a successful &lt;code&gt;docker login&lt;/code&gt; command, Docker stores a base64 encoded string from the concatenation of the username, a colon, and the password and associates this string to the registry the user is logging into:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ echo azRjaDA6c3VwZXJzZWNyZXRwYXNzd29yZAo= | base64 -d -
k4ch0:supersecretpassword
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A &lt;code&gt;docker logout&lt;/code&gt; command removes the entry from the JSON file for the given registry:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker logout quay.io
Remove login credentials for quay.io

$ cat ~/.docker/config.json
{
	&amp;quot;auths&amp;quot;: {
		&amp;quot;https://index.docker.io/v1/&amp;quot;: {
      &amp;quot;auth&amp;quot;: &amp;quot;azRjaDA6c3VwZXJzZWNyZXRwYXNzd29yZAo=&amp;quot;
    }
	},
	&amp;quot;HttpHeaders&amp;quot;: {
		&amp;quot;User-Agent&amp;quot;: &amp;quot;Docker-Client/18.09.6 (linux)&amp;quot;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;docker-credential-helpers&#34;&gt;Docker Credential Helpers&lt;/h2&gt;

&lt;p&gt;Since docker version 1.11 implements support from an external credential store for registry authentication. That means we can use a native keychain of the OS. Using an external store is more secure than storing on a &amp;ldquo;plain text&amp;rdquo; Docker configuration file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/docker-login-the-right-way/DockerSecureCredentials.png&#34; alt=&#34;Secure Storage&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In order to use a external credential store, we need a program to interact with.&lt;/p&gt;

&lt;p&gt;The actual list of &amp;ldquo;official&amp;rdquo; Docker Credential Helper is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;docker-credential-osxkeychain: Provides a helper to use the OS X keychain as credentials store.&lt;/li&gt;
&lt;li&gt;docker-credential-secretservice: Provides a helper to use the D-Bus secret service as credentials store.&lt;/li&gt;
&lt;li&gt;docker-credential-wincred: Provides a helper to use Windows credentials manager as store.&lt;/li&gt;
&lt;li&gt;docker-credential-pass: Provides a helper to use pass as credentials store.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;docker-credential-secretservice&#34;&gt;docker-credential-secretservice&lt;/h2&gt;

&lt;p&gt;On this post we will explore the docker-credential-secretservice and how to configure it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We need to download and install the helper.
You can find the lastest release on  &lt;a href=&#34;https://github.com/docker/docker-credential-helpers/releases&#34; target=&#34;_blank&#34;&gt;https://github.com/docker/docker-credential-helpers/releases&lt;/a&gt;.&lt;br /&gt;
Download it, extract it and make it executable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;wget https://github.com/docker/docker-credential-helpers/releases/download/v0.6.2/docker-credential-secretservice-v0.6.2-amd64.tar.gz
tar -xf docker-credential-secretservice-v0.6.2-amd64.tar.gz
chmod +x docker-credential-secretservice
sudo mv docker-credential-secretservice /usr/local/bin/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Then, we need to specify the credential store in the file &lt;code&gt;~/.docker/config.json&lt;/code&gt; to tell docker to use it.&lt;br /&gt;
The value must be the one after the prefix &lt;code&gt;docker-credential-&lt;/code&gt;. In this case:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
	&amp;quot;credsStore&amp;quot;: &amp;quot;secretservice&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To facilite the configuration and do not make mistakes, you can run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sed -i &#39;0,/{/s/{/{\n\t&amp;quot;credsStore&amp;quot;: &amp;quot;secretservice&amp;quot;,/&#39; ~/.docker/config.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From now we are uning an external store, so if you are currently logged in, you must run &lt;code&gt;docker logout&lt;/code&gt; to remove the credentials from the file and run &lt;code&gt;docker login&lt;/code&gt; tostart using the new ones.&lt;/p&gt;

&lt;p&gt;Let me know how this works for you.&lt;/p&gt;

&lt;p&gt;References:
&lt;a href=&#34;https://github.com/docker/docker-credential-helpers&#34; target=&#34;_blank&#34;&gt;https://github.com/docker/docker-credential-helpers&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/login/#credentials-store&#34; target=&#34;_blank&#34;&gt;https://docs.docker.com/engine/reference/commandline/login/#credentials-store&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.slideshare.net/DavidYeung22/can-we-stop-saving-docker-credentials-in-plain-text-now&#34; target=&#34;_blank&#34;&gt;https://www.slideshare.net/DavidYeung22/can-we-stop-saving-docker-credentials-in-plain-text-now&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bulk Delete Rackspace Cloud Files data via API</title>
      <link>/bulk-delete-cloud-files-api/</link>
      <pubDate>Wed, 13 Feb 2019 13:37:04 -0600</pubDate>
      <guid>/bulk-delete-cloud-files-api/</guid>
      <description>&lt;p&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;
HAHAHUGOSHORTCODE-TOC0-HBHB&lt;/p&gt;

&lt;p&gt;Sometimes it is necessary to delete all the content of the Cloud Files containers, however, the API does not have a proper method to delete the data and the containers on the same API call. Also, accoring to the documentation, you can only delete &lt;strong&gt;empty&lt;/strong&gt; containers.&lt;/p&gt;

&lt;p&gt;So, in cases where you need to delete the &lt;strong&gt;data and the containers&lt;/strong&gt; at the same time, you should follow the next steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Download &lt;a href=&#34;https://github.com/cloudnull/turbolift&#34; target=&#34;_blank&#34;&gt;Turbolift&lt;/a&gt;, I know it is an old tool.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/cloudnull/turbolift
cd turbolift
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In order to get and isolated installation, we are going to create a Python Virtual Environment (virtualenv)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkvirtualenv turbolift
workon turbolift
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install the tool&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install turbolift
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now, prior to start to play with the API calls, we need to grab some data to authenticate with the API:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Variable&lt;/th&gt;
&lt;th&gt;Definition&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;USERNAME&lt;/td&gt;
&lt;td&gt;This is the Rackspace Public Cloud username&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;APIKEY&lt;/td&gt;
&lt;td&gt;This is your API-KEY&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;REGION&lt;/td&gt;
&lt;td&gt;This is the Region where the Cloud Files are located (dfw, ord, iad, lon, hkg)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;TOKEN&lt;/td&gt;
&lt;td&gt;The TOKEN is generated after you get authenticated&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ENDPOINT&lt;/td&gt;
&lt;td&gt;This ENDPOINT is given also after you get authenticated&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next step, we are going to use &lt;a href=&#34;https://curl.haxx.se/&#34; target=&#34;_blank&#34;&gt;cURL&lt;/a&gt;, to perform all the API calls:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First of all, get the TOKEN:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;USERNAME=YOUR-USERNAME
APIKEY=YOUR-APIKEY
TOKEN=$(curl -s -XPOST https://identity.api.rackspacecloud.com/v2.0/tokens \ 
  -d&#39;{&amp;quot;auth&amp;quot;:{&amp;quot;RAX-KSKEY:apiKeyCredentials&amp;quot;:{&amp;quot;username&amp;quot;:&amp;quot;&#39;$USERNAME&#39;&amp;quot;,&amp;quot;apiKey&amp;quot;:&amp;quot;&#39;$APIKEY&#39;&amp;quot;}}}&#39; \
  -H&amp;quot;Content-type:application/json&amp;quot; | jq &#39;.access.token.id&#39; | tr -d &amp;quot;\&amp;quot;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next step, get the ENDPOINT:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ENDPOINT=$(curl -s -XPOST https://identity.api.rackspacecloud.com/v2.0/tokens \ 
    -d&#39;{&amp;quot;auth&amp;quot;:{&amp;quot;RAX-KSKEY:apiKeyCredentials&amp;quot;:{&amp;quot;username&amp;quot;:&amp;quot;&#39;$CL_USERNAME&#39;&amp;quot;,&amp;quot;apiKey&amp;quot;:&amp;quot;&#39;$APIKEY&#39;&amp;quot;}}}&#39; \
    -H&amp;quot;Content-type:application/json&amp;quot; | jq &#39;.access.serviceCatalog[] | select((.name==&amp;quot;cloudFiles&amp;quot;) or (.name==&amp;quot;cloudFilesCDN&amp;quot;)) | {name} + .endpoints[] | .publicURL&#39; | tr -d &amp;quot;\&amp;quot;&amp;quot; | grep -v cdn | grep -i $REGION)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this case we are skipping all te CDN endpoints, but you can add them if is necessary.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;With all the collected data, next step is use turbolift to delete the Cloud Files container and their data. To do it, I use a for-loop:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;for i in $(curl -s -H &amp;quot;X-Auth-Token: $TOKEN&amp;quot; $ENDPOINT); do turbolift -u $USERNAME -a $APIKEY --os-rax-auth $REGION delete -c $i ; done  
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, you have all the Data and Cloud Files containers deleted on one region.&lt;/p&gt;

&lt;p&gt;ð&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configure SSH on a Ruckus Switch</title>
      <link>/configure-ruckus-switch/</link>
      <pubDate>Tue, 20 Nov 2018 13:15:43 -0600</pubDate>
      <guid>/configure-ruckus-switch/</guid>
      <description>&lt;p&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;
HAHAHUGOSHORTCODE-TOC0-HBHB&lt;/p&gt;

&lt;p&gt;I just have a Ruckus ICX 7150 Switch on my home and I&amp;rsquo;m trying to get access under ssh and web, to easy configuration and security instead of use telnet.
So, I logged in using telnet and then run the following commands to configure a username/password and begin to receive petirions over port 22(ssh) and port 443(https).
Let&amp;rsquo;s begin!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We will connect via telnet to the switch.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt; telnet SWITCH_IP
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once we are on the Switch CLI as a optional step, we can configure an IP on the switch.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt; device&amp;gt; enable
 device# configure terminal
 device(config)# ip address IP_ADDRESS/CIDR
 device(config)# ip default-gateway IP_GATEWAY
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now, the next steps are for generate a SSL certificate, a username/password, activate password to login and enable thw web access and ssh access.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt; device(config)# crypto-ssl certificate generate
 device(config)# username USERNAME password PASSWORD
 device(config)# aaa authentication login default local
 device(config)# aaa authentication web-server default local
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It may take several minutes to generate the certificate key. After that, save the configuration.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt; device(config)# write memory
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now you are able to login on your switch using ssh or web.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://robrobstation.com/2017/07/17/ruckus-icx7150-c12p-initial-configuration/&#34; target=&#34;_blank&#34;&gt;https://robrobstation.com/2017/07/17/ruckus-icx7150-c12p-initial-configuration/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My First Contribution to OpenStack project</title>
      <link>/my-first-contribution-to-openstack/</link>
      <pubDate>Thu, 15 Mar 2018 12:04:16 -0600</pubDate>
      <guid>/my-first-contribution-to-openstack/</guid>
      <description>&lt;p&gt;I been working since last year using &lt;a href=&#34;https://www.ansible.com/&#34; target=&#34;_blank&#34;&gt;Ansible&lt;/a&gt; for fun and to trying to get prepared to become a DevOps, so I found an excelent OpenStack project called &lt;a href=&#34;https://github.com/openstack/ara&#34; target=&#34;_blank&#34;&gt;ARA Records Ansible&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/my-first-contribution-to-openstack/Ansible-Logo.png&#34; alt=&#34;Ansible Logo&#34; /&gt;
&lt;img src=&#34;/img/my-first-contribution-to-openstack/ARA-Logo.png&#34; alt=&#34;ARA Logo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Basically it  is a project from the OpenStack community that makes it easier to understand and troubleshoot your Ansible roles and playbooks.&lt;br /&gt;
If you want more information, please refer to the &lt;a href=&#34;http://ara.readthedocs.io/en/latest/&#34; target=&#34;_blank&#34;&gt;Documentation Page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Anyhow, I just found a little bug on the Ansible Role to install ARA &lt;a href=&#34;https://git.openstack.org/cgit/openstack/ansible-role-ara/&#34; target=&#34;_blank&#34;&gt;ansible-role-ara&lt;/a&gt; on Debian based distros and just send the patch to fixit.&lt;/p&gt;

&lt;p&gt;Here is the link to my &lt;a href=&#34;https://git.openstack.org/cgit/openstack/ansible-role-ara/commit/&#34; target=&#34;_blank&#34;&gt;contribution&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And, as I am proud of my first commit on a big project here is the screenshot too:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/my-first-contribution-to-openstack/OpenStack-Contribution.png&#34; alt=&#34;My First OpenStack Contribution&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I feel happy and motivated to still learn about this Open Source project and a lot more.&lt;/p&gt;

&lt;p&gt;ð&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Improve WD MyCloud performance</title>
      <link>/improve-wd-mycloud-performance/</link>
      <pubDate>Fri, 16 Feb 2018 11:30:18 -0600</pubDate>
      <guid>/improve-wd-mycloud-performance/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve just noticed that my NAS a &lt;a href=&#34;https://www.wdc.com/products/network-attached-storage/my-cloud-expert-series-ex2-ultra.html&#34; target=&#34;_blank&#34;&gt;Western Digital My Cloud EX2&lt;/a&gt; is going slower, so I decided to investigate about what can I do to improve its performance.&lt;/p&gt;

&lt;p&gt;I assume that you already configure ssh on your NAS device.
If is not configured you can follow the next instructions: &lt;a href=&#34;https://support.wdc.com/knowledgebase/answer.aspx?ID=14952&#34; target=&#34;_blank&#34;&gt;https://support.wdc.com/knowledgebase/answer.aspx?ID=14952&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;stop-indexing-services&#34;&gt;Stop Indexing Services&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;/etc/init.d/wdmcserver stop
/etc/init.d/wdphotodbmerger stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To do it forever, you should create the cronjob as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;crontab -e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And add the following lines:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;@reboot /bin/sh /etc/init.d/wdmcserverd stop
@reboot /bin/sh /etc/init.d/wdphotodbmerger stop
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>WordPress with Let&#39;s Encrypt SSL Certificate on a Load Balancer</title>
      <link>/</link>
      <pubDate>Sun, 03 Sep 2017 09:26:47 -0600</pubDate>
      <guid>/</guid>
      <description>

&lt;p&gt;Hi again,&lt;/p&gt;

&lt;p&gt;As many of you know a lot of &amp;ldquo;Production&amp;rdquo; applications need to be configured to provide High Availability. With that in mind, a best practice architecture to your application is to add a Load Balancer as a front end who distribute your traffic between your application nodes, as you can appreciate on the next image:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/wordpress-lets-encrypt-ssl-certificate-load-balancer/LoadBalancerHA.png&#34; alt=&#34;Load Balancer HA&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;ssl-offloading&#34;&gt;SSL Offloading&lt;/h1&gt;

&lt;p&gt;In this case, my &amp;ldquo;Production&amp;rdquo; application is my blog, and I will install a SSL Certificate on the Cloud Load Balancer(CLB) to offloading the encryption/decryption to the CLB instead of doing it on the webserver. That way your webservers uses port 80 (HTTP), as always, and you serve your content trought port 443(HTTPS).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/wordpress-lets-encrypt-ssl-certificate-load-balancer/SSL-Offloading.jpg&#34; alt=&#34;SSL-Offloading&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here are the what I use to configure my WordPress with SSL Certificate:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SSL Certificate issued using Let&amp;rsquo;s Encrypt&lt;/li&gt;
&lt;li&gt;A Client of Let&amp;rsquo;s Encrypt called acme&lt;/li&gt;
&lt;li&gt;A Cloud Load Balancer&lt;/li&gt;
&lt;li&gt;A WordPress installation&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;step-1-install-acme-sh-client&#34;&gt;Step 1: Install acme.sh client&lt;/h2&gt;

&lt;p&gt;There is a lot of &lt;a href=&#34;https://letsencrypt.org/docs/client-options/&#34; target=&#34;_blank&#34;&gt;ACME clients&lt;/a&gt; supported by Let&amp;rsquo;s Encrypt, the most popular is &lt;a href=&#34;https://certbot.eff.org&#34; target=&#34;_blank&#34;&gt;Certbot.&lt;/a&gt; However, I prefer to use &lt;a href=&#34;https://github.com/Neilpang/acme.sh&#34; target=&#34;_blank&#34;&gt;acme.sh&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s install it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/Neilpang/acme.sh.git
cd acme.sh
# Create a data home directory
sudo mkdir -p /opt/acme/data
# Actual command to install it
bash acme.sh --install --home /opt/acme --config-home /opt/acme/data --certhome /opt/acme/data/ssl-certs --accountemail your@email.com
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-2-issue-ssl-certificate&#34;&gt;Step 2: Issue SSL Certificate&lt;/h2&gt;

&lt;p&gt;Once acme.sh is installed, we proceed to issue our first SSL Certificate:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;/opt/acme/acme.sh --issue -d example.com -w /var/www/vhosts/example.com/public_html
[Mon Aug 25 06:04:07 UTC 2017] Creating domain key
[Mon Aug 25 06:04:07 UTC 2017] The domain key is here: /opt/acme/data/ssl-certs/example.com/example.com.key
[Mon Aug 25 06:04:07 UTC 2017] Single domain=&#39;example.com&#39;
[Mon Aug 25 06:04:07 UTC 2017] Getting domain auth token for each domain
[Mon Aug 25 06:04:07 UTC 2017] Getting webroot for domain=&#39;example.com&#39;
[Mon Aug 25 06:04:07 UTC 2017] Getting new-authz for domain=&#39;example.com&#39;
[Mon Aug 25 06:04:08 UTC 2017] The new-authz request is ok.
[Mon Aug 25 06:04:08 UTC 2017] Verifying:example.com
[Mon Aug 25 06:04:11 UTC 2017] Success
[Mon Aug 25 06:04:11 UTC 2017] Verify finished, start to sign.
[Mon Aug 25 06:04:11 UTC 2017] Cert success.
-----BEGIN CERTIFICATE-----
MIIE/zCCA+egAwIBAgISA2AIs/G8gWjkRkNOUb7zmqh1MA0GCSqGSIb3DQEBCwUA
MEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQD
ExpMZXQncyBFbmNyeXB0IEF1dGhvcml0eSBYMzAeFw0xNzA4MjgwNTA0MDBaFw0x
NzExMjYwNTA0MDBaMBkxFzAVBgNVBAMTDmNvb2tpZWxhYnMubmV0MIIBIjANBgkq
hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAo8/4fXH0dOHcSlyXpsBoULhwQYkz4m0J
MegRHU2mhyy/jfKWM6KHDxHpFWUFajLJ/ORE4uncvjmRYeSVBxgv2R2cYoZyKd6v
txT+Cdj3jD9fBfDerfdfsdfsd6Y6mlr6Im61afKsFXIgLsprBpK22JU6HOz+0Fdo
lan09aaF8zLPtVzdfJw9MU55K7nzerxO8j4ro2lve0PHExkMIBCrXey50wcuqQRY
hwkbbXsm+wTES7TCn3tooSzFq6ore3JrSckxhFQ96EOea0s9CgYnw4d9rU/b3jyK
bFCILEJK64vgFHx0qvd0hBJFJG/HUtAXAVrFQjjlZlCmCMbnee1UTQIDAQABo4IC
DjCCAgowDgYDVR0pasoasoasogWgMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEF
BQcDAjAMBgNVHRMBAf8EAjAAMB0GA1UdDgQWBBR2KRpXKKgTorwfXpo44wgKyFUl
QzAfBgNVHSMEGDAWgBSoSmpjBH3duubRObemRWXv86jsoTBvBggrBgEFBQcBAQRj
MGEwLgYIKwYBBQUHMAASdTdddHA6Ly9vY3NwLmludC14My5sZXRzZW5jcnlwdC5v
cmcwLwYIKwYBBQUHMAKGI2h0dHA6Ly9jZXJ0LmludC14My5sZXRzZW5jcnlwdC5v
cmcvMBkGA1UdEQQSMBCCDmNvb2tpZWxhYnMubmV0MIH+BgNVHSAEgfYwgfMwCAYG
Z4EMAQIBMIHmBgsrBgEEAYLfEwEBATCB1jAmBggrBgEFBQcCARYaaHR0cDovL2Nw
cy5sZXRzZW5jcnlwdC5vcmcwgasGCCsGAQUFBwICMIGeDIGbVGhpcyBDZXJ0aWZp
Y2F0ZSBtYXkgb25seSBiZSByZWxpZWQgdXBvbiBieSBSZWx5aW5nIFBhcnRpZXMg
YW5kIG9ubHkgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBDZXJ0aWZpY2F0ZSBQb2xp
Y3kgZm91bmQgYXQgaHR0cHM6Ly9sZXRzZW5jcnlwdC5vcmcvcmVwb3NpdG9yeS8w
DQYJKoZIhvcNAQELBQADggEBAFVGs82tzyVER6U0x7p/Q+6xplDFd6ap/dVX9G6i
eRPf4ayGykPSH9J3ewu398LOQd3DE93oWbqc7PfEC40Z5HqvCEY3fl9auep99/IF
rwhf36J7PXvEsPrUB6pxNFSBw9WX366Z1MP8qoIzm3XYEpp2D/SPniWY5+eQ42Pj
WNxxVksA4kFUF9wgKcrsCNTm0X8GZj5HUXC1OwtlopY2w42QrAMGwz1jM4nxv5Mc
Jim+nT0zmJUhAdQi8ocDjAl2PvcfdgfmkMr9IWH3al/GJSKy3a9Cq+BaIsIUYi6E
8M8Mj+00ONNn1folm9aVn+FW5fVCaxYN32ir8PnoTWkOXK8=
-----END CERTIFICATE-----
[Mon Aug 25 06:04:11 UTC 2017] Your cert is in  /opt/acme/data/ssl-certs/example.com/example.com.cer 
[Mon Aug 25 06:04:11 UTC 2017] Your cert key is in  /opt/acme/data/ssl-certs/example.com/example.com.key 
[Mon Aug 25 06:04:11 UTC 2017] The intermediate CA cert is in  /opt/acme/data/ssl-certs/example.com/ca.cer 
[Mon Aug 25 06:04:11 UTC 2017] And the full chain certs is there:  /opt/acme/data/ssl-certs/example.com/fullchain.cer 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where the explained options are:&lt;/p&gt;

&lt;p&gt;-issue: Issue a new certificate&lt;/p&gt;

&lt;p&gt;-d (-domain) : Specifies a domain, used to issue, renew or revoke, etc.&lt;/p&gt;

&lt;p&gt;-w (-webroot) : Specifies the web root folder for web root mode. This is the DocumentRoot where your site is hosted and it is necessary to verify it by Let&amp;rsquo;s Encrypt.&lt;/p&gt;

&lt;h2 id=&#34;step-3-install-ssl-certificate-on-cloud-load-balancer&#34;&gt;Step 3: Install SSL Certificate on Cloud Load Balancer&lt;/h2&gt;

&lt;p&gt;So, at this moment we have our SSL Certificate, Private Key, and Intermediate CA Certificate ready to install on our Cloud Load Balancer (CLB)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Your cert is in /opt/acme/data/ssl-certs/example.com/example.com.cer
Your cert key is in /opt/acme/data/ssl-certs/example.com/example.com.key
The intermediate CA cert is in /opt/acme/data/ssl-certs/example.com/ca.cer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we should go to &lt;a href=&#34;https://mycloud.rackspace.com&#34; target=&#34;_blank&#34;&gt;https://mycloud.rackspace.com&lt;/a&gt; -&amp;gt; Rackspace Cloud -&amp;gt; Networking -&amp;gt; Cloud Load Balancers:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/wordpress-lets-encrypt-ssl-certificate-load-balancer/CLB01.png&#34; alt=&#34;Cloud Load Balancer&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then, to Optional Features and Enable/Configure on &amp;ldquo;Secure Traffic SSL&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/wordpress-lets-encrypt-ssl-certificate-load-balancer/CLB02.png&#34; alt=&#34;Cloud Load Balancer&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, we add our SSL Certificate, Private Key, and Intermediate CA Certificate to the CLB and save the configuration:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/wordpress-lets-encrypt-ssl-certificate-load-balancer/CLB03.png&#34; alt=&#34;Cloud Load Balancer&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-4-configure-wordpress&#34;&gt;Step 4: Configure WordPress&lt;/h2&gt;

&lt;p&gt;We are almost done, at this time we already have configured our SSL on the CLB to provide WordPress over HTTPS, however, WordPress is still with HTTP, so we need to reconfigure our WordPress with SSL.&lt;/p&gt;

&lt;h3 id=&#34;database-queries&#34;&gt;Database queries&lt;/h3&gt;

&lt;p&gt;First of all, we should update the links from http to https; we are going to do it directly on the database doing the following queries:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Change all instances of &lt;code&gt;example.com&lt;/code&gt; to your own. If you have the &lt;code&gt;www&lt;/code&gt; as part of your WordPress Address(URL) in the WordPress Settings, add the &amp;lsquo;www&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;Also, if you have a custom table prefix in the WordPress database, something other than the default &amp;lsquo;wp&lt;em&gt;&amp;rsquo;, then you must change all the instances of &amp;lsquo;wp&lt;/em&gt;&amp;rsquo; to your own table prefix.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Update any embedded attachments/img that use http:This one updates the src attributes that use double quotes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;UPDATE `wp_posts` SET post_content = REPLACE(post_content, &#39;src=\&amp;quot;http://example.com&#39;, \ 
&#39;src=\&amp;quot;https://example.com&#39;) WHERE post_content LIKE &#39;%src=\&amp;quot;http://example.com%&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This one takes care of any src attributes that use single quotes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;UPDATE `wp_posts` SET post_content = REPLACE(post_content, &#39;src=\&#39;http://example.com&#39;, \ 
&#39;src=\&#39;https://example.com&#39;) WHERE post_content LIKE &#39;%src=\&#39;http://example.com%&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Update any hard-coded URLs for links.This one updates the URL for href attributes that use double quotes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;UPDATE `wp_posts` SET post_content = REPLACE(post_content, &#39;href=\&amp;quot;http://example.com&#39;, \
&#39;href=\&amp;quot;https://example.com&#39;) WHERE post_content LIKE &#39;%href=\&amp;quot;http://example.com%&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This one updates the URL for href attributes that use single quotes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;UPDATE `wp_posts` SET post_content = REPLACE(post_content, &#39;href=\&#39;http://example.com&#39;, \
&#39;href=\&#39;https://example.com&#39;) WHERE post_content LIKE &#39;%href=\&#39;http://example.com%&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Update any &amp;ldquo;pinged&amp;rdquo; links:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;UPDATE `wp_posts` SET pinged = REPLACE(pinged, &#39;http://example.com&#39;, \
&#39;https://example.com&#39;) WHERE pinged LIKE &#39;%http://example.com%&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This step is just a confirmation step to make sure that there are no remaining http URLs for your site in the wp_posts table, except the GUID URLs.&lt;/p&gt;

&lt;p&gt;You must replace WP_DB_NAME, near the beginning of the query, with the name of your database.&lt;/p&gt;

&lt;p&gt;This will confirm that nowhere in the wp_posts table is there a remaining http URL, outside of the GUID column. This ignores URLs in the GUID column.&lt;/p&gt;

&lt;p&gt;This query only searches; it does not replace anything, nor make any changes. So, this is safe to run. Itâs a safe and quick way to check the wp_posts table while ignoring the guid column.&lt;/p&gt;

&lt;p&gt;This SQL query should return an empty set. That would mean that it found no http URLs for your site. (This is all just 1 query. Itâs 1 very, very long line.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning:Â &lt;/strong&gt;Remember to replace WP_DB_NAME, near the beginning of the query, with the name of your database.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT *  FROM `WP_DB_NAME`.`wp_posts` WHERE (CONVERT(`ID` USING utf8) LIKE \
&#39;%%http://example.com%%&#39; OR CONVERT(`post_author` USING utf8) LIKE &#39;%%http://example.com%%&#39; \ 
OR CONVERT(`post_date` USING utf8) LIKE &#39;%%http://example.com%%&#39; \ 
OR CONVERT(`post_date_gmt` USING utf8) LIKE &#39;%%http://example.com%%&#39; \
OR CONVERT(`post_content` USING utf8) LIKE &#39;%%http://example.com%%&#39; \
OR CONVERT(`post_title` USING utf8) LIKE &#39;%%http://example.com%%&#39; \ 
OR CONVERT(`post_excerpt` USING utf8) LIKE &#39;%%http://example.com%%&#39; \
OR CONVERT(`post_status` USING utf8) LIKE &#39;%%http://example.com%%&#39; \
OR CONVERT(`comment_status` USING utf8) LIKE &#39;%%http://example.com%%&#39; \
OR CONVERT(`ping_status` USING utf8) LIKE &#39;%%http://example.com%%&#39; \
OR CONVERT(`post_password` USING utf8) LIKE &#39;%%http://example.com%%&#39; \
OR CONVERT(`post_name` USING utf8) LIKE &#39;%%http://example.com%%&#39; \
OR CONVERT(`to_ping` USING utf8) LIKE &#39;%%http://example.com%%&#39; \
OR CONVERT(`pinged` USING utf8) LIKE &#39;%%http://example.com%%&#39; \
OR CONVERT(`post_modified` USING utf8) LIKE &#39;%%http://example.com%%&#39; \
OR CONVERT(`post_modified_gmt` USING utf8) LIKE &#39;%%http://example.com%%&#39; \
OR CONVERT(`post_content_filtered` USING utf8) LIKE &#39;%%http://example.com%%&#39; \
OR CONVERT(`post_parent` USING utf8) LIKE &#39;%%http://example.com%%&#39; \
OR CONVERT(`menu_order` USING utf8) LIKE &#39;%%http://example.com%%&#39; \
OR CONVERT(`post_type` USING utf8) LIKE &#39;%%http://example.com%%&#39; \
OR CONVERT(`post_mime_type` USING utf8) LIKE &#39;%%http://example.com%%&#39; \
OR CONVERT(`comment_count` USING utf8) LIKE &#39;%%http://example.com%%&#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now, we move to the wp_comments table. This changes any comment author URLs that point to the http version of your site. This is in case youâve ever replied to a comment while your URL was pointing to http.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;UPDATE `wp_comments` SET comment_author_url = REPLACE(comment_author_url, \ 
&#39;http://example.com&#39;, &#39;https://example.com&#39;) WHERE comment_author_url \ 
LIKE &#39;%http://example.com%&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This updates the content of the comments on your site. If there are any links in the comments that are linking to an http URL on your site, they will be updated to https.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;UPDATE `wp_comments` SET comment_content = REPLACE(comment_content, &#39;http://example.com&#39;, \ 
&#39;https://example.com&#39;) WHERE comment_content LIKE &#39;%http://example.com%&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now we move to the wp_postmeta table. This takes care of any custom post meta that points to the http version of your site.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;UPDATE `wp_postmeta` SET `meta_value` = REPLACE(meta_value, &#39;http://example.com&#39;, \ 
&#39;https://example.com&#39;) WHERE meta_value LIKE &#39;%http://example.com%&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now we move to the wp_options table. Update the âWordPress Address (URL)â and âSite Address (URL)â.&lt;/p&gt;

&lt;p&gt;For the WordPress Address URL, you may have to modify example.com. If you have WordPress installed in some other directory, then modify this according to your own WordPress URL. For example, some people have WordPress installed in a subdirectory named âblogâ, and so their WordPress Address would be &lt;a href=&#34;https://example.com/blog&#34; target=&#34;_blank&#34;&gt;https://example.com/blog&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;UPDATE `wp_options` SET `option_value` = &amp;quot;https://example.com&amp;quot; \ 
WHERE `wp_options`.`option_name` = &#39;siteurl&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This one will update the Site Address URL (this is the home page of your site):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;UPDATE `wp_options` SET `option_value` = &amp;quot;https://example.com&amp;quot; \
WHERE `wp_options`.`option_name` = &#39;home&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;wordpress-control-panel&#34;&gt;WordPress Control Panel&lt;/h3&gt;

&lt;p&gt;Besides, with run the queries directly on the database, we can update, or verify,Â  the blog URLs, by going to Settings &amp;gt; General&lt;/p&gt;

&lt;p&gt;And updating your WordPress Address (URL) and Site Address (URL) address fields.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/wordpress-lets-encrypt-ssl-certificate-load-balancer/WP-ChangeURL.png&#34; alt=&#34;Updating URLs&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;wordpress-config-file&#34;&gt;WordPress Config File&lt;/h3&gt;

&lt;p&gt;Finally, we should add the following line to our &lt;strong&gt;wp_config.php&lt;/strong&gt; file&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$_SERVER[&#39;HTTPS&#39;]=&#39;on&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, you have configured WordPress with Let&amp;rsquo;s Encrypt SSL Certificate on a Load Balancer.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title> Build a Dynamic DNS Client with Rackspace API</title>
      <link>/build-a-dynamc-dns-client-with-rackspace-api/</link>
      <pubDate>Mon, 11 Apr 2016 01:24:48 -0600</pubDate>
      <guid>/build-a-dynamc-dns-client-with-rackspace-api/</guid>
      <description>&lt;p&gt;This time I&amp;rsquo;ve want to create a homemade Server with my Raspberry Pi2 and publish it using my own sub-domain, the main problem is that the ISP provide me an dynamic IP and we should ensure that if my IP address change the sub-domain record should point to the new IP.&lt;/p&gt;

&lt;p&gt;The instructions assume that you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Have a domain&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Have already changed your NS records to point to dns1.stabletransit.com and dns2.stabletransit.com.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;You should download the latest version of rsdns from github&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd ~/bin/
git clone https://github.com/linickx/rsdns.git
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Go to your Rackspace portal (&lt;a href=&#34;https://mycloud.rackspace.com/&#34; target=&#34;_blank&#34;&gt;https://mycloud.rackspace.com/&lt;/a&gt;) and grab your Username &amp;amp; API key (It&amp;rsquo;s under &amp;ldquo;Your Account&amp;rdquo; -&amp;gt; &amp;ldquo;Account Settings&amp;rdquo; -&amp;gt; &amp;ldquo;API Key&amp;rdquo;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a configuration file for rsdns (~/.rsdns_config) with your settings.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash
RSUSER=lcacho 
RSAPIKEY=1234567890
RSPATH=~/bin/rsdns/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You need your domain created on Rackspace(It&amp;rsquo;s under &amp;ldquo;Networking&amp;rdquo; -&amp;gt; &amp;ldquo;Cloud DNS&amp;rdquo; -&amp;gt; &amp;ldquo;Create Domain&amp;rdquo;) if you don&amp;rsquo;t have your domain created you are able to created using rsdns:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./rsdns-domain.sh -d www.luiscachog.io -e lcacho@luisachog.io
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once you have a domain setup you need to create an A record. To create the A record you going to need an IP address, you can use &lt;a href=&#34;http://icanhazip.com&#34; target=&#34;_blank&#34;&gt;http://icanhazip.com&lt;/a&gt; to get your actual current IP. Again to create a record you are able to do it from Rackspace panel (It&amp;rsquo;s under &amp;ldquo;Networking&amp;rdquo; -&amp;gt; &amp;ldquo;Cloud DNS&amp;rdquo; -&amp;gt; YOUR_DOMAIN -&amp;gt; &amp;ldquo;Add Record&amp;rdquo;) or you can use rsdns:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./rsdns-a.sh -n dynamic-host.luiscachog.io -i 123.123.123.123 -t 3600
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the above the TTL is set to 1hr (3600 secs), this is so that DNS caches do not keep the record too long. That&amp;rsquo;s all the pre-work done, now lets get your dynamic host setup!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The script to update your a record is rsdns-dc.sh, and you run it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./rsdns-dc.sh -n dynamic-host.luiscachog.io
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The script uses icanhazip to get your current IP, it then update the A record with it.&lt;/p&gt;

&lt;p&gt;I never switch off my router so I have create a created a cronjob to run that script every 2 hours, plus the 1hr TTL should mean that the record is roughly in sync with my IP without making unnecessary requests&lt;/p&gt;

&lt;p&gt;7.- I use CentOS, so I can simply drop the following file called rsdns-dc into /etc/cron.d/ with this&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;vim /etc/cron.d/rsdns-dc
* */2  * * *     lcacho /home/lcacho/bin/rsdns/rsdns-dc.sh -n dynamic-host.luiscachog.io &amp;amp;&amp;gt;/dev/null
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we are done! Private Dynamic DNS on your own zone using the Rackspace API.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spamassassin Error: cannot create user preferences file //.spamassassin/user_prefs: Permission denied on VestaCP - CentOS</title>
      <link>/spamassassin-error-on-vestacp-centos/</link>
      <pubDate>Wed, 08 Apr 2015 00:39:38 -0600</pubDate>
      <guid>/spamassassin-error-on-vestacp-centos/</guid>
      <description>&lt;p&gt;When you configure spamassassin on VestaCP (CentOS) sometimes you might have some problems with the autolearn feature and also with the bayes plugin of spamassassin.&lt;/p&gt;

&lt;p&gt;The error looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;more /var/log/maillog

Apr  5 00:31:00 vestaserver01 spamd[1353]: spamd: connection from localhost [127.0.0.1] at port 37022
Apr  5 00:31:00 vestaserver01 spamd[1353]: spamd: setuid to nobody succeeded
Apr  5 00:31:00 vestaserver01 spamd[1353]: spamd: creating default_prefs: //.spamassassin/user_prefs
Apr  5 00:31:00 vestaserver01 spamd[1353]: config: cannot create user preferences file //.spamassassin/user_prefs: No such file or directory
Apr  5 00:31:00 vestaserver01 spamd[1353]: spamd: failed to create readable default_prefs: //.spamassassin/user_prefs
Apr  5 00:31:00 vestaserver01 spamd[1353]: spamd: checking message &amp;amp;lt;5520C87B.8020009@example.com&amp;amp;gt; for nobody:99
Apr  5 00:31:00 vestaserver01 spamd[1353]: plugin: eval failed: bayes: (in learn) locker: safe_lock: cannot create tmp lockfile /.spamassassin/bayes.lock.vestaserver01.example.com.1353 for /.spamassassin/bayes.lock: No such file or directory
Apr  5 00:31:00 vestaserver01 spamd[1353]: spamd: clean message (-1.0/5.0) for nobody:99 in 0.2 seconds, 3138 bytes.
Apr  5 00:31:00 vestaserver01 spamd[1353]: spamd: result: . 0 - ALL_TRUSTED,HTML_MESSAGE scantime=0.2,size=3138,user=nobody,uid=999,required_score=5.0,rhost=localhost,raddr=127.0.0.1,rport=37022,mid=&amp;amp;lt;5520C87B.8020009@example.com&amp;amp;gt;,autolearn=unavailable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Basically the error are the permissions on: //.spamassassin/user_prefs&lt;/p&gt;

&lt;p&gt;To fix it follow the next steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create the user spamd, in order to avoid to run spamassassin with the user nobody:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;groupadd -g 1001 spamd
useradd -u 1001 -g spamd -s /sbin/nologin -d /var/lib/spamassassin spamd
mkdir /var/lib/spamassassin
chown spamd:spamd /var/lib/spamassassin&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Edit the file /etc/exim/exim.conf.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;vi /etc/exim/exim.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Change the line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;spam           = nobody:true/defer_ok
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;spam           = spamd:true/defer_ok
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Restart exim an spamassassin&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;/etc/init.d/exim restart 
/etc/init.d/spamassassin restart
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;After that verify that the files &lt;strong&gt;bayes_seen, bayes_toks and user_prefs&lt;/strong&gt; exists on the spamd home (In this case /var/lib/spamassassin)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pwd
/var/lib/spamassassin
ls -la
total 40
drwxr-xr-x  3 spamd spamd  4096 Apr  7 17:58 .
drwxr-xr-x 36 root  root   4096 Feb 25 00:56 ..
-rw-------  1 spamd spamd 12288 Apr  2 21:34 bayes_seen
-rw-------  1 spamd spamd 12288 Apr  2 17:34 bayes_toks
-rw-r--r--  1 spamd spamd  1869 Apr  1 17:18 user_prefs
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Done!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SFTP Jailed</title>
      <link>/sftp-jailed/</link>
      <pubDate>Tue, 31 Mar 2015 22:22:12 -0600</pubDate>
      <guid>/sftp-jailed/</guid>
      <description>&lt;p&gt;To configure your server to use a jailed user on SFTP you should do:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Edit the sshd_config file
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We need to comment the following line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Subsystem sftp /usr/libexec/openssh/sftp-server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And add the uncomment line, your modification will be same as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Subsystem sftp /usr/libexec/openssh/sftp-server
Subsystem sftp internal-sftp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, at the end of the file we should to add the next lines:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Match Group sftponly
ChrootDirectory %h
X11Forwarding no
AllowTCPForwarding no
ForceCommand internal-sftp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After save all the changes, we must restart the sshd daemon&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;service sshd restart
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Add &lt;strong&gt;sftponly&lt;/strong&gt; group&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;groupadd sftponly
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add jailed user and add to &lt;strong&gt;sftponly&lt;/strong&gt; group&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;useradd -m USERNAME
passwd USERNAME
usermod -aG sftponly,apache USERNAME
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: Create directory and establish correct permissions&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;chown root:root /home/USERNAME
chmod 755 /home/USERNAME
mkdir /home/USERNAME/TEST.DOMAIN.COM
chown apache:apache /home/USERNAME/TEST.DOMAIN.COM
chmod 775 /home/USERNAME/TEST.DOMAIN.COM
mkdir /var/www/vhost/TEST.DOMAIN.COM
chown apache:apache /var/www/vhost/TEST.DOMAIN.COM
chmod 775 /var/www/vhost/TEST.DOMAIN.COM
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;If you have any connection problem please double check the permissions on the folders and check the logs on /var/log/secure&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tail -f /var/log/secure
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Mount DocumentRoot path on jailed user home directory&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mount -o bind,noatime /var/www/vhost/TEST.DOMAIN.COM/ /home/USERNAME/TEST.DOMAIN.COM
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Make the mount point permanent, editing the fstab file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;vi /etc/fstab&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Add the mount point at the end of the file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;/var/www/vhost/TEST.DOMAIN.COM/ /home/USERNAME/TEST.DOMAIN.COM none bind,noatime 0 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save and exit&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Test connection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sftp SERVERIP
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>View sources IP&#39;s in Apache Logs behind a Load Balancer</title>
      <link>/view-sources-ips-apache-logs-behind-loadbalancer/</link>
      <pubDate>Fri, 13 Feb 2015 02:08:44 -0500</pubDate>
      <guid>/view-sources-ips-apache-logs-behind-loadbalancer/</guid>
      <description>&lt;p&gt;When you use the Rackspace Cloud Load Balancers, it is common that the IP logged in Apache is the Private IP (ServiceNet) from the Cloud Load Balancer, however, we can fix that.&lt;/p&gt;

&lt;p&gt;We can view sources IP&amp;rsquo;s in Apache Logs doing some changes on Apache configuration file and also on the vhosts configuration files.&lt;/p&gt;

&lt;p&gt;On your Apache configuration file, you should to find the line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;LogFormat &amp;quot;%h %l %u %t \&amp;quot;%r\&amp;quot; %&amp;amp;gt;s %b \&amp;quot;%{Referer}i\&amp;quot; \&amp;quot;%{User-Agent}i\&amp;quot;&amp;quot; combined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Modified to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;LogFormat &amp;quot;%{X-Forwarded-For}i %h %l %u %t \&amp;quot;%r\&amp;quot; %&amp;amp;gt;s %O \&amp;quot;%{Referer}i\&amp;quot; \&amp;quot;%{User-Agent}i\&amp;quot;&amp;quot; combined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And also, on your vhosts configuration files you should to change the &amp;ldquo;combined&amp;rdquo; LogFormat definition will then be called in a &amp;ldquo;CustomLog&amp;rdquo; entry specific to your VirtualHost configuration. Here is an example VirtualHost definition to show you what I&amp;rsquo;m referring to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ServerAdmin webmaster@example.com
DocumentRoot /var/www/html/example.com
ServerName example.com
ErrorLog logs/example.com-error_log
CustomLog logs/example.com-access_log combined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After adding the X-Forwarded-For definition to the LogFormat definition, you can restart Apache and view the logs to notice the difference. If all is done properly, you will see an actual public IP in the first field of your logs instead of the Cloud Load Balancer IP.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Yosemite stuck on boot process</title>
      <link>/yosemite-stuck-boot-process/</link>
      <pubDate>Thu, 08 Jan 2015 00:26:46 -0600</pubDate>
      <guid>/yosemite-stuck-boot-process/</guid>
      <description>&lt;p&gt;Sometimes, I&amp;rsquo;m having problems with my Mac, when it&amp;rsquo;s sleep (hibernate) and I tried to &amp;ldquo;wake up&amp;rdquo; the Mac doesn&amp;rsquo;t start, and it shows me a Black Screen. So, I&amp;rsquo;ve rebooted and after that it is stuck on the boot process.&lt;/p&gt;

&lt;p&gt;So, I&amp;rsquo;ve found these solution to avoid that Yosemite stuck on the boot process:&lt;/p&gt;

&lt;p&gt;A. Enter to Single-user or verbose mode&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Shutdown the Mac&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Press the power button to start the computer&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Immediately press and hold the Command Key and either of the following&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the &amp;ldquo;s&amp;rdquo; key for single-user mode (Command-S)&lt;/li&gt;
&lt;li&gt;the &amp;ldquo;v&amp;rdquo; key for verbose mode (Command-V)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;B. When you login on the Mac, you should run the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;/sbin/mount -uw /
rm -rf /System/Library/Caches/*
rm /private/var/db/BootCache.playlsit
reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the reboot, your Mac will boot as always.&lt;/p&gt;

&lt;p&gt;ð&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Update a ThemeForest Theme with the Envato WordPress Toolkit</title>
      <link>/update-themeforest-themes-envato-wordpress-toolkit/</link>
      <pubDate>Mon, 10 Nov 2014 00:26:44 -0600</pubDate>
      <guid>/update-themeforest-themes-envato-wordpress-toolkit/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve purchased some themes on ThemeForest.com because they&amp;rsquo;re great. So this time I want to write about &amp;ldquo;How to Update ThemeForest Themes with the Envato WordPress Toolkit&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;First of all, Envato WordPress Toolkit it is very similar to a WordPress plugin. The installation it is the only difference. So I will explain how install the &amp;ldquo;plugin&amp;rdquo; and how to use in order to get the last update from your theme.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Envato WordPress Toolkit is NOT available on WordPress Repositories, so you will to download from Github. &lt;a href=&#34;https://github.com/envato/envato-wordpress-toolkit&#34; target=&#34;_blank&#34;&gt;https://github.com/envato/envato-wordpress-toolkit&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;After you download the .ZIP file, you should be able to install from the WordPress Plugin Manager. Or you could upload the &amp;ldquo;envato-wordpress-toolkit&amp;rdquo; folder to the &amp;ldquo;/wp-content/plugins/&amp;rdquo;&amp;rdquo; directory.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Activate the Plugin from the WordPress Plugin Manager.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You will need to generate an API key from your Themeforest account.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;4.1. In order to get your API key from Themeforest, you should login to themeforest.com, go to your dashboard and click on &amp;#8220;My Settings&amp;#8221; The API Keys screen allows you to generate a free API key.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/update-themeforest-themes-envato-wordpress-toolkit/generate-api-key.png&#34; alt=&#34;Generate API key&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Once the API connection has been established you will see a list of themes that can be auto installed. If you don&amp;rsquo;t see any themes and are certain you&amp;rsquo;ve done everything correct, there is a good chance the theme author has not updated their theme to be available for auto install and update. If that&amp;rsquo;s the case, please contact the theme author and ask them to update their theme&amp;rsquo;s information.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;/img/update-themeforest-themes-envato-wordpress-toolkit/theme-autoupdate.png&#34; alt=&#34;Theme Autoupdate&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This &amp;ldquo;plugin&amp;rdquo; very helpful to get your themes updated. I hope works for you as well as with me.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MySQL reset root password</title>
      <link>/mysql-reset-root-password/</link>
      <pubDate>Wed, 30 Jul 2014 00:26:47 -0600</pubDate>
      <guid>/mysql-reset-root-password/</guid>
      <description>&lt;p&gt;Hello,&lt;/p&gt;

&lt;p&gt;This time I share with you the faster and more secure method to reset the root password of MySQL.&lt;/p&gt;

&lt;p&gt;This method is faster because the downtime is between 1 or 2 seconds (MySQL restart time) and it is more secure because the mysqld is not started without grants on the tables.&lt;/p&gt;

&lt;p&gt;The steps are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create text file /var/lib/mysql/mysql-init with the sintaxis to reset the password for user root:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;vim /var/lib/mysql/mysql-init
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SET PASSWORD FOR &#39;root&#39;@&#39;localhost&#39; = PASSWORD(&#39;new_password&#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add under the [mysqld] stanza on the file /etc/my.cnf:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;init-file=/var/lib/mysql/mysql-init
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Restart the mysqld service:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;service mysqld restart
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Remove the init-file line from /etc/my.cnf&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Remove /var/lib/mysql/mysql-init&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;rm /var/lib/mysql/mysql-init
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;dl&gt;
&lt;dt&gt;And after that, you can access again to your mysql instance.&lt;/dt&gt;
&lt;/dl&gt;

&lt;p&gt;:)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MySQL without password</title>
      <link>/mysql-without-password/</link>
      <pubDate>Tue, 15 Apr 2014 02:08:44 -0500</pubDate>
      <guid>/mysql-without-password/</guid>
      <description>&lt;p&gt;&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;The common form to log in to MySQL server, is running a mysql command with your login credentials and server&amp;rsquo;s IP address as arguments. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mysql -u $MYSQL_ROOT -p$MYSQL_PASS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, besides the inconvenience of typing extra arguments, using plain-text login credentials in a command line like above is really not a secure way to access a MySQL server.&lt;/p&gt;

&lt;p&gt;MySQL offers a way for you to log in to MySQL server without password, by using an external MySQL configuration file. In Linux, there are two different kinds of MySQL configuration files:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;/etc/my.cnf and&lt;/li&gt;
&lt;li&gt;~/.my.conf&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While any system-wide MySQL configuration is defined in /etc/my.cnf, any user-specific MySQL configuration is stored in ~/.my.cnf. You can leverage ~/.my.cnf, to define your MySQL login credential in the file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;vim ~/.my.cnf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We put our MySQL user in the configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[client]
user=root
password=$PASSWORD_ROOT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure to have the configuration file readable to you only.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;chmod 0600 ~/.my.cnf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once ~/.my.cnf is created, simply typing mysql command will let you log in to the MySQL server as root, and you no longer need to provide login password separately.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mysql

Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 14787
Server version: 5.1.73 Source distribution

Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.

mysql&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
