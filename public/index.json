[{"authors":["admin"],"categories":null,"content":"Hola!\nMi nombre es Luis Cacho y soy un Ingeniero en Sistemas Computacionales. Me defino a mi mismo como un entusiasta de Linux que ama trabajar y exprimentar con técnologias de Código Abierto mientras aprendo y aplico las mejores practicas y mis habilidades para resolver problemas.\nActualmente trabajo como Linux System Administrator en las oficinas principales de Rackspace, basadas en San Antonio, TX, US.\nQuiero compartir mis experiencias que he adquirido a tráves de los años en este blog.\n","date":1520271356,"expirydate":-62135596800,"kind":"taxonomy","lang":"es","lastmod":1574012156,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"Hola!\nMi nombre es Luis Cacho y soy un Ingeniero en Sistemas Computacionales. Me defino a mi mismo como un entusiasta de Linux que ama trabajar y exprimentar con técnologias de Código Abierto mientras aprendo y aplico las mejores practicas y mis habilidades para resolver problemas.\nActualmente trabajo como Linux System Administrator en las oficinas principales de Rackspace, basadas en San Antonio, TX, US.\nQuiero compartir mis experiencias que he adquirido a tráves de los años en este blog.","tags":null,"title":"Luis Cacho","type":"authors"},{"authors":["Luis Cacho"],"categories":["Linux","SysAdmin","DevOps","Open Source"],"content":" Índice HAHAHUGOSHORTCODE-TOC0-HBHB\n1. Motivación Estoy intentando escribir un poco más en mi blog, ya que noté que muchas veces no lo hacia muy a menudo por que al llegar a la consola de administración de Wordpress, habia que dar bastantes clicks para llegar al menu de \u0026ldquo;Posts\u0026rdquo;, además de que cada vez que entraba había un plugin diferente que actualizar, y verificar que nada se rompiera con las nuevas actualizaciónes, en pocas palabras hay que darle bastante mantenimiento a un sitio con Wordpress, y además de eso había que dedicarse a escribir el post.\nOtra razón por lo que opté hacer el cambio de plataforma, es que al estar tratando de convertirme en DevOps, es necesario, desde mi punto de vista; tratar automatizar/scriptear la mayoria de tus tareas que realizas día a día, y con Hugo considero que se puede realizar este objetivo también.\n1.1 Consideraciones Una vez que decidí migrarme de Wordpress, el siguiente paso era decidir a que plataforma mudarme. De entrada la plataforma que queria probar era un Static Site Generator, aqui otro link de por que usar un Static Site Generator.\nPartiendo de lo anterior, las opciones que me parecieron interesantes fueron:\n Hugo Jekyll Octopress Hexo  Cada una de las opciones tiene diferentes caracteristicas, que no vamos a discutir en este post, sin embargo las carteristicas que me convencieron de usar Hugo por encima de las otras alternativas fueron:\n Consta solamente de un binario, que comparado con las otras posibilidades hay que instalar todo un ambiente de desarrollo/producción. Es bastante rápido. Es Multi-plataforma Tiene diversos temas  2. Instruciones 2.1 Consideraciones técnicas El ambiente consta de:\n 1 servidor productivo donde esta instalado hugo, git y un servidor web (apache o nginx) , haremos todos los deployments usando el usuario admin, ojo que no es el usuario root. 1 servidor/equipo de desarrollo, de igual forma que cuenta con hugo y git, en mi caso, es mi computadora personal y mi usuario es luiscachog. 1 cuenta de github.com  2.2 Autenticación mediante llaves SSH El primer paso es realizar el intercambio de llaves SSH entre el equipo de desarrollo y el equipo productivo. Para ello seguimos los siguientes pasos:\n Generar la llave SSH, tendrás que contestar algunas preguntas, entre las cuales está si quieres ponerle un password, a lo cual deberas dejarlo en blanco para que no te pida contraseña.\nluiscachog@dev-server:~$ ssh-keygen  Copiar la llave SSH hacia el equipo productivo:\nluiscachog@dev-server:~$ ssh-copy-id admin@IP_servidor_productivo  Verificar que te puedas conectar desde tu servidor de desarrollo, con tu usuario al servidor productivo, con el usuario que realizará los deployments.\nluiscachog@dev-server:~$ ssh admin@162.125.2.30 hostname  En este caso, debera de mostrarte el hostname del servidor productivo sin pedirte el password.\n  2.3 Configuración sitio con Hugo El siguiente paso es configurar nuestro ambiente de desarrollo con Hugo y Git.\n Para instalar ambos en Ubuntu o derivados debes de ejecutar:\nluiscachog@dev-server:~$ sudo apt install hugo git  Para tener la version más actualizada de hugo puedes seguir los pasos descritos en este link\n Vamos a crear un directorio de trabajo para nuestro sitio estatico\nluiscachog@dev-server:~$ mkdir ~/sites luiscachog@dev-server:~$ cd ~/sites  Crearemos un nuevo sitio usando el comando hugo\nluiscachog@dev-server:~$ hugo new site luiscachog.io Congratulations! Your new Hugo site is created in /home/luiscachog/sites/luiscachog.io. Just a few more steps and you're ready to go: 1.- Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/, or create your own with the \u0026quot;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026quot; command. 2.- Perhaps you want to add some content. You can add single files with \u0026quot;hugo new \u0026lt;SECTIONNAME\u0026gt;/\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026quot;. 3.- Start the built-in live server via \u0026quot;hugo server\u0026quot;. Visit https://gohugo.io/ for quickstart guide and full documentation.  Cuando termine de correr el comando se podra apreciar los siguientes directorios y archivos\nluiscachog@dev-server:~$ cd luiscachog.io luiscachog@dev-server:~$ ls archetypes config.toml content data layouts static themes luiscachog@dev-server:~$ tree . ├── archetypes │ └── default.md ├── config.toml ├── content ├── data ├── layouts ├── static └── themes 6 directories, 2 files  El siguiente paso es agregar un tema, puedes encontrar uno que te guste en https://themes.gohugo.io/\ngit init git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke # Edit your config.toml configuration file # and add the new theme. echo 'theme = \u0026quot;ananke\u0026quot;' \u0026gt;\u0026gt; config.toml  Como recomendación adicional en este paso, puedes realizar un fork del tema que te guste en github para poder realizar modificaciones y proponer cambios al mismo, contribuyendo de esa forma a su desarrollo, para hacerlo, sigue los pasos:\n Realizar un fork del tema, sigue esta guia para hacerlo. Al realizar el fork, tendras en tus repositorios de github el tema que quieras, por lo que tendras que ejecutar los mismos comandos del punto anterior, pero el repositorio del tema apuntara a tu usario en github\ngit init git submodule add https://github.com/k4ch0/gohugo-theme-ananke.git themes/ananke # Edit your config.toml configuration file # and add the new theme. echo 'theme = \u0026quot;ananke\u0026quot;' \u0026gt;\u0026gt; config.toml   Vamos a crear un post de prueba para verificar que todo esta funcionando correctamente\nhugo new posts/my-first-post.md echo \u0026quot;Hola Mundo\u0026quot; \u0026gt;\u0026gt; content/posts/my-first-post.md  El comando anterior creara un archivo en la ruta content/posts/my-first-post.md, y el contenido será:\n--- title: \u0026quot;My First Post\u0026quot; date: 2018-02-28T12:02:38-06:00 draft: true --- Hola Mundo!!!  Finalmente, probaremos que nuestro sitio estatico con nuestro post se muestren de manera local, en nuestro servidor de desarrollo. Cabe mencionar, que por defecto el comando \u0026lsquo;hugo server\u0026rsquo; no mostrará los posts que tengan la opción \u0026lsquo;draft: true\u0026rsquo;, por ello se agrega la bandera -D\nluiscachog@dev-server:~$ hugo server -D   2.4 Configuración del repositorio Git en el servidor de desarrollo 1ra parte En el paso pasado, realizamos la inicialización del repositorio dentro del directorio del sitio estatico:\nluiscachog@dev-server:~$ pwd /home/luiscachog/sites/luiscachog.io luiscachog@dev-server:~$ git status On branch master Initial commit Changes to be committed: (use \u0026quot;git rm --cached \u0026lt;file\u0026gt;...\u0026quot; to unstage) new file: .gitmodules new file: themes/ananke Untracked files: (use \u0026quot;git add \u0026lt;file\u0026gt;...\u0026quot; to include in what will be committed) archetypes/ config.toml content/ themes/ananke/  Ahora, para tener el repositorio publico, tenemos que crear el repositorio en github.com y configurarlo como un repositorio remoto\nluiscachog@dev-server:~$ git add * luiscachog@dev-server:~$ git commit -m \u0026quot;First commit\u0026quot; luiscachog@dev-server:~$ git remote add origin https://github.com/k4ch0/luiscachog.io luiscachog@dev-server:~$ git push -u origin master  2.5 Configuración del repositorio Git en el servidor productivo Para poder ocupar los hooks de git es necesario hacer una primera copia inicial del repositorio en el que vamos a trabajar, con la particularidad de que el repositorio clonado debe ser del tipo bare.\nEn nuestro servidor productivo haremos:\nadmin@prod-server:~$ mkdir sites admin@prod-server:~$ cd sites admin@prod-server:~$ git clone --bare https://github.com/k4ch0/luiscachog.io luiscachog.io.git  2.5.1 Configuración del hook  Ya que tenemos nuestro repositorio tipo bare en el servidor productivo vamos a crear el script que mandará a llamar el hook de git.\nadmin@prod-server:~$ cd sites/luiscachog.io.git/hooks admin@prod-server:~$ vim post-update  Y agregamos algo asi:\n#!/bin/bash GIT_REPO=$HOME/luiscachog.io.git WORKING_DIRECTORY=/var/www/vhosts/luiscachog.io/working_hugo PUBLIC_WWW=/var/www/vhosts/luiscachog.io/public_html BACKUP_WWW=/var/www/vhosts/luiscachog.io/backup_html MY_DOMAIN=luiscachog.io set -e rm -rf $WORKING_DIRECTORY rsync -aqz $PUBLIC_WWW/ $BACKUP_WWW trap \u0026quot;echo 'A problem occurred. Reverting to backup.'; rsync -aqz --del $BACKUP_WWW/ $PUBLIC_WWW; rm -rf $WORKING_DIRECTORY\u0026quot; EXIT git clone $GIT_REPO $WORKING_DIRECTORY mkdir -p $WORKING_DIRECTORY/themes rm -rf $PUBLIC_WWW/* /home/admin/bin/hugo -v -s $WORKING_DIRECTORY -d $PUBLIC_WWW -b \u0026quot;http://${MY_DOMAIN}\u0026quot; trap - EXIT  Damos permisos de ejecución al script\nadmin@prod-server:~$ chmod +x post-update  Probamos que nuestro script funcione adecuadamente:\nadmin@prod-server:~$ ~/sites/luiscachog.io.git/hooks/post-update Cloning into '/var/www/vhosts/luiscachog.io/working_hugo'... done. 0 draft content 0 future content 4 pages created 0 paginator pages created 0 tags created 1 categories created in 26 ms  Podras verificar tu nuevo post en la URL de su sitio:\nhttp://production_domain_or_IP   2.6 Configuración del repositorio Git en el servidor de desarrollo 2da parte Una vez tenemos configurado nuestro repositorio en el servidor de producción, procedemos a agregarlo como repositorio remoto en nuestro servidor de desarrollo\nluiscachog@dev-server:~$ cd /home/luiscachog/sites/luiscachog.io luiscachog@dev-server:~$ git remote add prod admin@IP_servidor_productivo:luiscachog.io luiscachog@dev-server:~$ git ls-remote prod d1b0b73528ab3117170ef74e133d0194dd2bc88a HEAD d1b0b73528ab3117170ef74e133d0194dd2bc88a refs/heads/master  Puedes verificar los repositorios remotos con el comando:\nluiscachog@dev-server:~$ git remote -v origin git@github.com:k4ch0/luiscachog.io.git (fetch) origin git@github.com:k4ch0/luiscachog.io.git (push) prod admin@IP_servidor_productivo:luiscachog.io.git (fetch) prod admin@IP_servidor_productivo:luiscachog.io.git (push)  Ahora cada vez que realizemos un push hacia el remote llamado \u0026lsquo;prod\u0026rsquo; se llamara la función del hook.\nluiscachog@dev-server:~$ cd /home/luiscachog/sites/luiscachog.io luiscachog@dev-server:~$ hugo new posts/Testing-Deployment.md luiscachog@dev-server:~$ echo \u0026quot;Deployment Test\u0026quot; \u0026gt;\u0026gt; content/posts/Testing-Deployment.md luiscachog@dev-server:~$ git add * luiscachog@dev-server:~$ git commit -m 'Deployment test with git hooks'  Este es el comando que hace la magia:\nluiscachog@dev-server:~$ git push prod master Counting objects: 3, done. Delta compression using up to 8 threads. Compressing objects: 100% (3/3), done. Writing objects: 100% (3/3), 310 bytes | 0 bytes/s, done. Total 3 (delta 2), reused 0 (delta 0) remote: Cloning into '/var/www/vhosts/luiscachog.io/working_hugo'... remote: done. remote: Cloning into '/var/www/vhosts/luiscachog.io/working_hugo/themes/hugo-future-imperfect'... remote: INFO 2018/03/01 03:12:34 Using config file: /var/www/vhosts/luiscachog.io/working_hugo/config.toml remote: Building sites … INFO 2018/03/01 03:12:34 syncing static files to /var/www/vhosts/luiscachog.io/public_html/ remote: remote: | EN remote: +------------------+----+ remote: Pages | 10 remote: Paginator pages | 0 remote: Non-page files | 0 remote: Static files | 3 remote: Processed images | 0 remote: Aliases | 1 remote: Sitemaps | 1 remote: Cleaned | 0 remote: remote: Total in 44 ms To admin@IP_servidor_productivo:luiscachog.io.git d5b0671..cvc4dee master -\u0026gt; master  Listo ya podemos probar nuestro sitio\nhttp://luiscachog.io  Con esto el siguiente paso que realizare es hacer el deployment de mi servidor para el blog usando Ansible.\nNos Vemos!!!\nSources: Digital Ocean\n","date":1520271356,"expirydate":-62135596800,"kind":"page","lang":"es","lastmod":1574012156,"objectID":"7db9e3074f198d8f5c982ec3d5496cba","permalink":"/deployment-hugo-site-git-hooks/","publishdate":"2018-03-05T11:35:56-06:00","relpermalink":"/deployment-hugo-site-git-hooks/","section":"post","summary":"Como realizar un deployment de un sitio con Hugo automaticamente usando Git Hooks","tags":["Hugo","Git","Open Source"],"title":"Deployment de un sitio estatico con Hugo y Git Hooks","type":"post"},{"authors":["Luis Cacho"],"categories":["DevOps","Featured","Rackspace"],"content":"  \nDesde el 6 de Enero estoy trabajando en Rackspace, the Open Cloud Company, eso significa que soy un Racker desde hace 3 meses y estoy amando cada minuto que ha pasado.\nPrevio Todo comenzo en Noviembre de 2013, cuando un Reclutador Técnico me contacto y comenzamos un proceso largo y exhaustivo de entrevistas. pruebas de habilidades, papeleo, etc, Acepte comenzar a trabajar como Administrador Linux I en el equipo dedicado a LATAM en Rackspace, entonces, ¡Estoy trabajando en una de las compañias técnologicas mas dínamicas, fánaticas, y divertidas del mundo!\nEn resumidas cuentas, estaba super emocionado, nervioso, feliz, todo al mismo tiempo.\nEl Castillo Desde que llegue al Castillo, todo ha sido maravilloso, he conocido gente amable, inteligente y fánatica, como por ejemplo @SugarBear, un embajador de la cultura de Rackspace, o Graham Weston, el director y co-fundador de Rackspace, los conocí en la Orientación de novatos (a.k.a Rookie\u0026rsquo;O), donde invertimos tiempo con otros novatos aprendiendo acerca de la historia de Rackspace, su cultura y los planes a futuro.\nEn el Rookie\u0026rsquo;O, me sorprendí y admire toda la energía que se transmitía entre los nuevos Rackers, ¡fue asombroso!\nLos Valores de Rackspace me inspiraron:\n Soporte Fánatico en todo lo que hagamos (Fanatical Support® in all we do). Resultados primero, sustancia sobre rapidez (Results first, substance over flash). Comprometido con la grandeza (Committed to Greatness). Total transparencia (Full Disclosure and Transparency). Pasión por nuestro trabajo (Passion for our Work). Tratar a los Rackers como amigos y familiares (Treat fellow Rackers like Friends and Family).  Which from my point of view I can applied to my personal life, and having great results.\nAlso is very comfortable to have a Coffe Shop, a soda machine or microwaves inside the Castle. It is pretty nice!\nIn general the first week in Rackspace, on the Rookie\u0026rsquo;O, I was a great experience, I can say that is one of my best experiences in my life.\nMy Goals This is a new big challenge, because means:\n Relocation in other country, specifically in San Antonio, TX, USA. Leave my family in Mexico City, that means that I see my parents only for Skype or FaceTime :). Know other culture, the \u0026ldquo;American\u0026rdquo; culture, with the Breakfast Tacos or Tex-Mex food (I really hate the Tex-Mex food yiack!) or the Lunch at noon, the people do not always says \u0026ldquo;Good morning\u0026rdquo; and some details that I don\u0026rsquo;t understand but here is common. Improve my skills in other language (English) event though I\u0026rsquo;m in the Rackspace LATAM team all the communications like emails or meetings are in English, so, it is very important for my job. And the most important challenge for me is still learn about Linux, get my Red Hat Certifications, do my best at job and take advantage of this great opportunity. All of that to try to be a DevOps Engineer  I will be working on, providing Fanatical Support for our customers, resolving LATAM customer issues with Linux and working with remote teams from all around the world.\nSummarizing, I\u0026rsquo;m a happy Racker 🙂\n","date":1396249724,"expirydate":-62135596800,"kind":"page","lang":"es","lastmod":1571900924,"objectID":"7bc1ce4c51e7dcb03184948dff531a4c","permalink":"/post/im-a-racker/","publishdate":"2014-03-31T02:08:44-05:00","relpermalink":"/post/im-a-racker/","section":"post","summary":"My experience at Rackspace","tags":["DevOps","Featured"],"title":"Soy un Racker","type":"post"}]