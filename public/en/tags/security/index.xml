<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Security | Luis Cacho</title>
    <link>/en/tags/security/</link>
      <atom:link href="/en/tags/security/index.xml" rel="self" type="application/rss+xml" />
    <description>Security</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2019</copyright><lastBuildDate>Wed, 15 May 2019 13:58:42 -0600</lastBuildDate>
    <image>
      <url>/img/lc-profile.png</url>
      <title>Security</title>
      <link>/en/tags/security/</link>
    </image>
    
    <item>
      <title>Docker Login the Right Way</title>
      <link>/docker-login-the-right-way/</link>
      <pubDate>Wed, 15 May 2019 13:58:42 -0600</pubDate>
      <guid>/docker-login-the-right-way/</guid>
      <description>

&lt;p&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;
HAHAHUGOSHORTCODE-TOC0-HBHB&lt;/p&gt;

&lt;h1 id=&#34;docker-login-the-right-way&#34;&gt;Docker Login the right Way&lt;/h1&gt;

&lt;p&gt;Hi again!&lt;/p&gt;

&lt;p&gt;It is been a while since I wrote something here, as always, there is no much time for a hobby.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been working for a while with docker, not a production level, but for some applications that I use at work.
And since the &lt;a href=&#34;https://www.theinquirer.net/inquirer/news/3074793/docker-hub-breach&#34; target=&#34;_blank&#34;&gt;Docker Hub Data breach&lt;/a&gt; I put more atention on the security of my data/credentials, so I investigate a little about and found this official repository &lt;a href=&#34;https://github.com/docker/docker-credential-helpers/&#34; target=&#34;_blank&#34;&gt;https://github.com/docker/docker-credential-helpers/&lt;/a&gt; from Docker where are the supported credential helpers.&lt;/p&gt;

&lt;h2 id=&#34;credential-store&#34;&gt;Credential Store&lt;/h2&gt;

&lt;p&gt;Docker keeps our credentials saved on a JSON file located on &lt;code&gt;~/.docker/config.json&lt;/code&gt;, but unfortunatelly credentials are just encrypted on base64, here is an &lt;a href=&#34;https://fosdem.org/2019/schedule/event/base64_not_encryption/&#34; target=&#34;_blank&#34;&gt;articule/video&lt;/a&gt; where there is an explanation for the why it is a bad idea to just use base64 encryption.&lt;/p&gt;

&lt;p&gt;The following is a diagram on how a plain text storage works:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/docker-login-the-right-way/DockerPlainTextCredentials.png&#34; alt=&#34;Plain Text Storage&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here is an exampleon how &lt;code&gt;~/.docker/config.json&lt;/code&gt; looks like when is using plain text credentials:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cat ~/.docker/config.json
{
	&amp;quot;auths&amp;quot;: {
		&amp;quot;https://index.docker.io/v1/&amp;quot;: {
      &amp;quot;auth&amp;quot;: &amp;quot;azRjaDA6c3VwZXJzZWNyZXRwYXNzd29yZAo=&amp;quot;
    },
    &amp;quot;quay.io&amp;quot;: {
      &amp;quot;auth&amp;quot;: &amp;quot;azRjaDA6c3VwZXJzZWNyZXRwYXNzd29yZAo=&amp;quot;
    }
	},
	&amp;quot;HttpHeaders&amp;quot;: {
		&amp;quot;User-Agent&amp;quot;: &amp;quot;Docker-Client/18.09.6 (linux)&amp;quot;
	}
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After a successful &lt;code&gt;docker login&lt;/code&gt; command, Docker stores a base64 encoded string from the concatenation of the username, a colon, and the password and associates this string to the registry the user is logging into:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ echo azRjaDA6c3VwZXJzZWNyZXRwYXNzd29yZAo= | base64 -d -
k4ch0:supersecretpassword
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A &lt;code&gt;docker logout&lt;/code&gt; command removes the entry from the JSON file for the given registry:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker logout quay.io
Remove login credentials for quay.io

$ cat ~/.docker/config.json
{
	&amp;quot;auths&amp;quot;: {
		&amp;quot;https://index.docker.io/v1/&amp;quot;: {
      &amp;quot;auth&amp;quot;: &amp;quot;azRjaDA6c3VwZXJzZWNyZXRwYXNzd29yZAo=&amp;quot;
    }
	},
	&amp;quot;HttpHeaders&amp;quot;: {
		&amp;quot;User-Agent&amp;quot;: &amp;quot;Docker-Client/18.09.6 (linux)&amp;quot;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;docker-credential-helpers&#34;&gt;Docker Credential Helpers&lt;/h2&gt;

&lt;p&gt;Since docker version 1.11 implements support from an external credential store for registry authentication. That means we can use a native keychain of the OS. Using an external store is more secure than storing on a &amp;ldquo;plain text&amp;rdquo; Docker configuration file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/docker-login-the-right-way/DockerSecureCredentials.png&#34; alt=&#34;Secure Storage&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In order to use a external credential store, we need a program to interact with.&lt;/p&gt;

&lt;p&gt;The actual list of &amp;ldquo;official&amp;rdquo; Docker Credential Helper is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;docker-credential-osxkeychain: Provides a helper to use the OS X keychain as credentials store.&lt;/li&gt;
&lt;li&gt;docker-credential-secretservice: Provides a helper to use the D-Bus secret service as credentials store.&lt;/li&gt;
&lt;li&gt;docker-credential-wincred: Provides a helper to use Windows credentials manager as store.&lt;/li&gt;
&lt;li&gt;docker-credential-pass: Provides a helper to use pass as credentials store.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;docker-credential-secretservice&#34;&gt;docker-credential-secretservice&lt;/h2&gt;

&lt;p&gt;On this post we will explore the docker-credential-secretservice and how to configure it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We need to download and install the helper.
You can find the lastest release on  &lt;a href=&#34;https://github.com/docker/docker-credential-helpers/releases&#34; target=&#34;_blank&#34;&gt;https://github.com/docker/docker-credential-helpers/releases&lt;/a&gt;.&lt;br /&gt;
Download it, extract it and make it executable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;wget https://github.com/docker/docker-credential-helpers/releases/download/v0.6.2/docker-credential-secretservice-v0.6.2-amd64.tar.gz
tar -xf docker-credential-secretservice-v0.6.2-amd64.tar.gz
chmod +x docker-credential-secretservice
sudo mv docker-credential-secretservice /usr/local/bin/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Then, we need to specify the credential store in the file &lt;code&gt;~/.docker/config.json&lt;/code&gt; to tell docker to use it.&lt;br /&gt;
The value must be the one after the prefix &lt;code&gt;docker-credential-&lt;/code&gt;. In this case:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
	&amp;quot;credsStore&amp;quot;: &amp;quot;secretservice&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To facilite the configuration and do not make mistakes, you can run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sed -i &#39;0,/{/s/{/{\n\t&amp;quot;credsStore&amp;quot;: &amp;quot;secretservice&amp;quot;,/&#39; ~/.docker/config.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From now we are uning an external store, so if you are currently logged in, you must run &lt;code&gt;docker logout&lt;/code&gt; to remove the credentials from the file and run &lt;code&gt;docker login&lt;/code&gt; tostart using the new ones.&lt;/p&gt;

&lt;p&gt;Let me know how this works for you.&lt;/p&gt;

&lt;p&gt;References:
&lt;a href=&#34;https://github.com/docker/docker-credential-helpers&#34; target=&#34;_blank&#34;&gt;https://github.com/docker/docker-credential-helpers&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/login/#credentials-store&#34; target=&#34;_blank&#34;&gt;https://docs.docker.com/engine/reference/commandline/login/#credentials-store&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.slideshare.net/DavidYeung22/can-we-stop-saving-docker-credentials-in-plain-text-now&#34; target=&#34;_blank&#34;&gt;https://www.slideshare.net/DavidYeung22/can-we-stop-saving-docker-credentials-in-plain-text-now&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
